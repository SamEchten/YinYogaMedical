import TransformingNetworkClient from '../../communication/TransformingNetworkClient';
import Callback from '../../types/Callback';
import Chargeback from '../chargebacks/Chargeback';
import Helper from '../Helper';
import Method from '../methods/Method';
import Payment from '../payments/Payment';
import Refund from '../refunds/Refund';
import { ProfileData } from './data';
import Profile from './Profile';
export default class ProfileHelper extends Helper<ProfileData, Profile> {
    protected readonly links: ProfileData['_links'];
    constructor(networkClient: TransformingNetworkClient, links: ProfileData['_links']);
    /**
     * @deprecated Use `profile.status == ProfileStatus.unverified` instead.
     */
    isUnverified(this: ProfileData): boolean;
    /**
     * @deprecated Use `profile.status == ProfileStatus.verified` instead.
     */
    isVerified(this: ProfileData): boolean;
    /**
     * @deprecated Use `profile.status == ProfileStatus.blocked` instead.
     */
    isBlocked(this: ProfileData): boolean;
    /**
     * The Checkout preview URL. You need to be logged in to access this page.
     *
     * @see https://docs.mollie.com/reference/v2/profiles-api/get-profile?path=_links/checkoutPreviewUrl#response
     */
    getCheckoutPreviewUrl(): string | null;
    /**
     * Returns the chargebacks that belong to this profile.
     *
     * @since 3.6.0
     */
    getChargebacks(): Promise<Array<Chargeback>>;
    getChargebacks(callback: Callback<Array<Chargeback>>): void;
    /**
     * Returns the methods that are enabled for this profile.
     *
     * @since 3.6.0
     */
    getMethods(): Promise<Array<Method>>;
    getMethods(callback: Callback<Array<Method>>): void;
    /**
     * Returns the payments that belong to this profile.
     *
     * @since 3.6.0
     */
    getPayments(): Promise<Array<Payment>>;
    getPayments(callback: Callback<Array<Payment>>): void;
    /**
     * Returns the refunds that belong to this profile.
     *
     * @since 3.6.0
     */
    getRefunds(): Promise<Array<Refund>>;
    getRefunds(callback: Callback<Array<Refund>>): void;
}
