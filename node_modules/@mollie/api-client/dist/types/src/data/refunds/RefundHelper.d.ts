import TransformingNetworkClient from '../../communication/TransformingNetworkClient';
import Callback from '../../types/Callback';
import Helper from '../Helper';
import Order from '../orders/Order';
import Payment from '../payments/Payment';
import { RefundData } from './data';
import Refund from './Refund';
export default class RefundHelper extends Helper<RefundData, Refund> {
    protected readonly links: RefundData['_links'];
    protected readonly embedded: RefundData['_embedded'];
    constructor(networkClient: TransformingNetworkClient, links: RefundData['_links'], embedded: RefundData['_embedded']);
    /**
     * Returns whether the refund is queued due to a lack of balance. A queued refund can be canceled.
     *
     * @deprecated Use `refund.status == RefundStatus.queued` instead.
     */
    isQueued(this: RefundData): boolean;
    /**
     * Returns whether the refund is ready to be sent to the bank. You can still cancel the refund if you like.
     *
     * @deprecated Use `refund.status == RefundStatus.pending` instead.
     */
    isPending(this: RefundData): boolean;
    /**
     * Returns whether the refund is being processed. Cancellation is no longer possible if so.
     *
     * @deprecated Use `refund.status == RefundStatus.processing` instead.
     */
    isProcessing(this: RefundData): boolean;
    /**
     * Returns whether the refund has been settled to your customer.
     *
     * @deprecated Use `refund.status == RefundStatus.refunded` instead.
     */
    isRefunded(this: RefundData): boolean;
    /**
     * Returns whether the refund has failed after processing.
     *
     * @deprecated Use `refund.status == RefundStatus.failed` instead.
     */
    isFailed(this: RefundData): boolean;
    /**
     * Returns the payment this refund was created for.
     *
     * @since 3.6.0
     */
    getPayment(): Promise<Payment>;
    getPayment(callback: Callback<Array<Payment>>): void;
    /**
     * Returns the order this refund belongs to.
     *
     * @since 3.6.0
     */
    getOrder(): Promise<Order> | Promise<undefined>;
    getOrder(callback: Callback<Order | undefined>): void;
}
