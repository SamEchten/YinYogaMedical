import TransformingNetworkClient from '../../communication/TransformingNetworkClient';
import Callback from '../../types/Callback';
import Maybe from '../../types/Maybe';
import Customer from '../customers/Customer';
import Helper from '../Helper';
import Payment from '../payments/Payment';
import Profile from '../profiles/Profile';
import { SubscriptionData } from './data';
import Subscription from './Subscription';
export default class SubscriptionHelper extends Helper<SubscriptionData, Subscription> {
    protected readonly links: SubscriptionData['_links'];
    constructor(networkClient: TransformingNetworkClient, links: SubscriptionData['_links']);
    /**
     * Returns the URL Mollie will call as soon a payment status change takes place.
     */
    getWebhookUrl(this: SubscriptionData): string;
    /**
     * @deprecated Use `subscription.status == SubscriptionStatus.active` instead.
     */
    isActive(this: SubscriptionData): boolean;
    /**
     * @deprecated Use `subscription.status == SubscriptionStatus.pending` instead.
     */
    isPending(this: SubscriptionData): boolean;
    /**
     * @deprecated Use `subscription.status == SubscriptionStatus.completed` instead.
     */
    isCompleted(this: SubscriptionData): boolean;
    /**
     * @deprecated Use `subscription.status == SubscriptionStatus.suspended` instead.
     */
    isSuspended(this: SubscriptionData): boolean;
    /**
     * @deprecated Use `subscription.status == SubscriptionStatus.canceled` instead.
     */
    isCanceled(this: SubscriptionData): boolean;
    /**
     * Returns the customer the subscription is for.
     *
     * @since 3.6.0
     */
    getCustomer(): Promise<Customer>;
    getCustomer(callback: Callback<Customer>): void;
    /**
     * Returns the website profile on which this subscription was created.
     *
     * @since 3.6.0
     */
    getProfile(): Promise<Profile> | Promise<undefined>;
    getProfile(callback: Callback<Maybe<Profile>>): void;
    /**
     * Returns the payments that are created by this subscription.
     *
     * @since 3.6.0
     */
    getPayments(): Promise<Array<Payment>>;
    getPayments(callback: Callback<Array<Payment>>): void;
}
