import TransformingNetworkClient from '../../communication/TransformingNetworkClient';
import Callback from '../../types/Callback';
import Maybe from '../../types/Maybe';
import Nullable from '../../types/Nullable';
import Chargeback from '../chargebacks/Chargeback';
import { Amount } from '../global';
import Helper from '../Helper';
import Order from '../orders/Order';
import Refund from '../refunds/Refund';
import Capture from './captures/Capture';
import { PaymentData } from './data';
import Payment from './Payment';
export default class PaymentHelper extends Helper<PaymentData, Payment> {
    protected readonly links: PaymentData['_links'];
    protected readonly embedded: Payment['_embedded'];
    constructor(networkClient: TransformingNetworkClient, links: PaymentData['_links'], embedded: Payment['_embedded']);
    /**
     * Returns whether the payment has been created, but nothing else has happened with it yet.
     *
     * @deprecated Use `payment.status == PaymentStatus.open` instead.
     */
    isOpen(this: PaymentData): boolean;
    /**
     * Returns whether new captures can be created for this payment.
     *
     * @deprecated Use `payment.status == PaymentStatus.authorized` instead.
     */
    isAuthorized(this: PaymentData): boolean;
    /**
     * Returns whether the payment is successfully paid.
     *
     * @deprecated Use `payment.status == PaymentStatus.paid` instead.
     */
    isPaid(this: PaymentData): boolean;
    /**
     * Returns whether the payment has been canceled by the customer.
     *
     * @deprecated Use `payment.status == PaymentStatus.canceled` instead.
     */
    isCanceled(this: PaymentData): boolean;
    /**
     * Returns whether the payment has expired, e.g. the customer has abandoned the payment.
     *
     * @deprecated Use `payment.status == PaymentStatus.expired` instead.
     */
    isExpired(this: PaymentData): boolean;
    /**
     * Returns whether the payment is refundable.
     *
     * @since 2.0.0-rc.2
     */
    isRefundable(this: PaymentData): boolean;
    /**
     * Returns the URL the customer should visit to make the payment. This is to where you should redirect the consumer.
     *
     * @deprecated Use `payment.getCheckoutUrl()` instead.
     */
    getPaymentUrl(): Nullable<string>;
    /**
     * Returns whether the payment has failed and cannot be completed with a different payment method.
     *
     * @deprecated Use `payment.status == PaymentStatus.failed` instead.
     */
    isFailed(this: PaymentData): boolean;
    /**
     * Returns whether the payment is in this temporary status that can occur when the actual payment process has been
     * started, but has not completed yet.
     *
     * @deprecated Use `payment.status == PaymentStatus.pending` instead.
     */
    isPending(this: PaymentData): boolean;
    /**
     * Returns whether there are refunds which belong to the payment.
     */
    hasRefunds(): boolean;
    /**
     * Returns whether there are chargebacks which belong to the payment.
     */
    hasChargebacks(): boolean;
    /**
     * Returns whether `sequenceType` is set to `'first'`. If a `'first'` payment has been completed successfully, the
     * consumer's account may be charged automatically using recurring payments.
     *
     * @deprecated Use `payment.sequenceType == SequenceType.first` instead.
     */
    hasSequenceTypeFirst(this: PaymentData): boolean;
    /**
     * Returns whether `sequenceType` is set to `'recurring'`. This type of payment is processed without involving the
     * consumer.
     *
     * @deprecated Use `payment.sequenceType == SequenceType.recurring` instead.
     */
    hasSequenceTypeRecurring(this: PaymentData): boolean;
    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the consumer to.
     *
     * @see https://docs.mollie.com/reference/v2/payments-api/get-payment?path=_links/checkout#response
     */
    getCheckoutUrl(): Nullable<string>;
    canBeRefunded(this: PaymentData): boolean;
    canBePartiallyRefunded(this: PaymentData): boolean;
    /**
     * Returns the total amount that is already refunded. For some payment methods, this amount may be higher than the
     * payment amount, for example to allow reimbursement of the costs for a return shipment to the customer.
     *
     * @deprecated Use `payment.amountRefunded` instead. To obtain the value, use `payment.amountRefunded?.value`.
     */
    getAmountRefunded(this: PaymentData): Amount;
    /**
     * Returns the remaining amount that can be refunded.
     *
     * @deprecated Use `payment.amountRemaining` instead. To obtain the value, use `payment.amountRemaining?.value`.
     */
    getAmountRemaining(this: PaymentData): Amount;
    /**
     * Recurring payments do not have a checkout URL, because these payments are executed without any user interaction. This link is included for test mode recurring payments, and allows you to set the
     * final payment state for such payments.
     *
     * This link is also included for paid test mode payments. This allows you to create a refund or chargeback for the payment. This works for all payment types that can be charged back and/or
     * refunded.
     *
     * @see https://docs.mollie.com/reference/v2/payments-api/get-payment?path=_links/changePaymentState#response-parameters-for-recurring-payments
     */
    getChangePaymentStateUrl(): Nullable<string>;
    /**
     * A link to a hosted payment page where your customer can finish the payment using an alternative payment method also activated on your website profile.
     *
     * @see https://docs.mollie.com/reference/v2/payments-api/get-payment?path=_links/payOnline#bank-transfer
     */
    getPayOnlineUrl(): Nullable<string>;
    /**
     * A link to a hosted payment page where your customer can check the status of their payment.
     *
     * @see https://docs.mollie.com/reference/v2/payments-api/get-payment?path=_links/status#bank-transfer
     */
    getStatusUrl(): Nullable<string>;
    /**
     * Returns all refunds created for the payment.
     *
     * @since 3.6.0
     */
    getRefunds(): Promise<Array<Refund>>;
    getRefunds(callback: Callback<Array<Refund>>): void;
    /**
     * Returns all chargebacks issued for the payment.
     *
     * @since 3.6.0
     */
    getChargebacks(): Promise<Array<Chargeback>>;
    getChargebacks(callback: Callback<Array<Chargeback>>): void;
    /**
     * Returns all captures that belong to the payment.
     *
     * @since 3.6.0
     */
    getCaptures(): Promise<Array<Capture>>;
    getCaptures(callback: Callback<Array<Capture>>): void;
    /**
     * Returns the order this payment was created for.
     *
     * @since 3.6.0
     */
    getOrder(): Promise<Order> | Promise<undefined>;
    getOrder(callback: Callback<Maybe<Order>>): void;
}
