import TransformingNetworkClient from '../../communication/TransformingNetworkClient';
import Callback from '../../types/Callback';
import Nullable from '../../types/Nullable';
import Helper from '../Helper';
import Payment from '../payments/Payment';
import Refund from '../refunds/Refund';
import { OrderData } from './data';
import Order from './Order';
import Shipment from './shipments/Shipment';
export default class OrderHelper extends Helper<OrderData, Order> {
    protected readonly links: OrderData['_links'];
    protected readonly embedded: Order['_embedded'];
    constructor(networkClient: TransformingNetworkClient, links: OrderData['_links'], embedded: Order['_embedded']);
    /**
     * Returns whether the order has been created, but nothing else has happened yet.
     */
    isCreated(this: OrderData): boolean;
    /**
     * Returns whether the order's payment is successfully completed with a payment method that does not support
     * authorizations.
     */
    isPaid(this: OrderData): boolean;
    /**
     * Returns whether the order's payment is successfully completed with a payment method that does support
     * authorizations. The money will only be transferred once a shipment is created for the order.
     */
    isAuthorized(this: OrderData): boolean;
    /**
     * Returns whether the order has been canceled.
     */
    isCanceled(this: OrderData): boolean;
    /**
     * Returns whether the first order line or part of an order line has started shipping. When the order is in this
     * state, it means that your order is partially shipped.
     */
    isShipping(this: OrderData): boolean;
    /**
     * Returns whether the order has been completed.
     */
    isCompleted(this: OrderData): boolean;
    /**
     * Returns whether the order has expired.
     */
    isExpired(this: OrderData): boolean;
    /**
     * Returns whether the the payment supplier is manually checking the order.
     */
    isPending(this: OrderData): boolean;
    /**
     * Returns the URL your customer should visit to make the payment for the order. This is where you should redirect
     * the customer to after creating the order.
     *
     * As long as the order is still in the `'created'` state, this link can be used by your customer to pay for this
     * order. You can safely share this URL with your customer.
     *
     * Recurring, authorized, paid and finalized orders do not have a checkout URL.
     */
    getCheckoutUrl(): Nullable<string>;
    /**
     * Returns all payments created for the order.
     *
     * @since 3.6.0
     */
    getPayments(): Promise<Array<Payment>>;
    getPayments(callback: Callback<Array<Payment>>): void;
    /**
     * Returns all refunds created for this order.
     *
     * @since 3.6.0
     */
    getRefunds(): Promise<Array<Refund>>;
    getRefunds(callback: Callback<Array<Refund>>): void;
    /**
     * Returns all shipments created for this order.
     *
     * @since 3.6.0
     */
    getShipments(): Promise<Array<Shipment>>;
    getShipments(callback: Callback<Array<Shipment>>): void;
}
