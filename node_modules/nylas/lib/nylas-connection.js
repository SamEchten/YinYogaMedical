"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// TODO since node 10 URL is global
var url_1 = require("url");
var node_fetch_1 = __importStar(require("node-fetch"));
var config = __importStar(require("./config"));
var restful_model_collection_1 = __importDefault(require("./models/restful-model-collection"));
var calendar_restful_model_collection_1 = __importDefault(require("./models/calendar-restful-model-collection"));
var contact_restful_model_collection_1 = __importDefault(require("./models/contact-restful-model-collection"));
var restful_model_instance_1 = __importDefault(require("./models/restful-model-instance"));
var account_1 = __importDefault(require("./models/account"));
var thread_1 = __importDefault(require("./models/thread"));
var draft_1 = __importDefault(require("./models/draft"));
var file_1 = __importDefault(require("./models/file"));
var event_1 = __importDefault(require("./models/event"));
var resource_1 = __importDefault(require("./models/resource"));
var folder_1 = __importStar(require("./models/folder"));
var form_data_1 = __importDefault(require("form-data"));
var neural_1 = __importDefault(require("./models/neural"));
var nylas_api_error_1 = __importDefault(require("./models/nylas-api-error"));
var component_restful_model_collection_1 = __importDefault(require("./models/component-restful-model-collection"));
var scheduler_restful_model_collection_1 = __importDefault(require("./models/scheduler-restful-model-collection"));
var message_restful_model_collection_1 = __importDefault(require("./models/message-restful-model-collection"));
var delta_collection_1 = __importDefault(require("./models/delta-collection"));
var outbox_1 = __importDefault(require("./models/outbox"));
var job_status_restful_model_collection_1 = __importDefault(require("./models/job-status-restful-model-collection"));
var PACKAGE_JSON = require('../package.json');
var SDK_VERSION = PACKAGE_JSON.version;
var SUPPORTED_API_VERSION = '2.5';
var AuthMethod;
(function (AuthMethod) {
    AuthMethod[AuthMethod["BASIC"] = 0] = "BASIC";
    AuthMethod[AuthMethod["BEARER"] = 1] = "BEARER";
})(AuthMethod = exports.AuthMethod || (exports.AuthMethod = {}));
var NylasConnection = /** @class */ (function () {
    function NylasConnection(accessToken, _a) {
        var clientId = _a.clientId;
        this.threads = new restful_model_collection_1.default(thread_1.default, this);
        this.contacts = new contact_restful_model_collection_1.default(this);
        this.messages = new message_restful_model_collection_1.default(this);
        this.drafts = new restful_model_collection_1.default(draft_1.default, this);
        this.files = new restful_model_collection_1.default(file_1.default, this);
        this.calendars = new calendar_restful_model_collection_1.default(this);
        this.jobStatuses = new job_status_restful_model_collection_1.default(this);
        this.events = new restful_model_collection_1.default(event_1.default, this);
        this.resources = new restful_model_collection_1.default(resource_1.default, this);
        this.deltas = new delta_collection_1.default(this);
        this.labels = new restful_model_collection_1.default(folder_1.Label, this);
        this.folders = new restful_model_collection_1.default(folder_1.default, this);
        this.account = new restful_model_instance_1.default(account_1.default, this);
        this.component = new component_restful_model_collection_1.default(this);
        this.scheduler = new scheduler_restful_model_collection_1.default(this);
        this.outbox = new outbox_1.default(this);
        this.neural = new neural_1.default(this);
        this.accessToken = accessToken;
        this.clientId = clientId;
    }
    NylasConnection.prototype.requestOptions = function (options) {
        var baseUrl = options.baseUrl ? options.baseUrl : config.apiServer;
        var url = new url_1.URL("" + baseUrl + options.path);
        // map querystring to search params
        if (options.qs) {
            for (var _i = 0, _a = Object.entries(options.qs); _i < _a.length; _i++) {
                var _b = _a[_i], key = _b[0], value = _b[1];
                // For convenience, If `expanded` param is provided, convert to view:
                // 'expanded' api option
                if (key === 'expanded') {
                    if (value === true) {
                        url.searchParams.set('view', 'expanded');
                    }
                }
                else if (key == 'metadata_pair') {
                    // The API understands a metadata_pair filter in the form of:
                    // <key>:<value>
                    for (var item in value) {
                        url.searchParams.set('metadata_pair', item + ":" + value[item]);
                    }
                }
                else if (Array.isArray(value)) {
                    for (var _c = 0, value_1 = value; _c < value_1.length; _c++) {
                        var item = value_1[_c];
                        url.searchParams.append(key, item);
                    }
                }
                else {
                    url.searchParams.set(key, value);
                }
            }
        }
        options.url = url;
        var headers = __assign({}, options.headers);
        var user = options.path.substr(0, 3) === '/a/' || options.path.includes('/component')
            ? config.clientSecret
            : this.accessToken;
        if (user) {
            if (options.authMethod === AuthMethod.BEARER) {
                headers['authorization'] = "Bearer " + user;
            }
            else {
                headers['authorization'] =
                    'Basic ' + Buffer.from(user + ":", 'utf8').toString('base64');
            }
        }
        if (!headers['User-Agent']) {
            headers['User-Agent'] = "Nylas Node SDK v" + SDK_VERSION;
        }
        headers['Nylas-API-Version'] = SUPPORTED_API_VERSION;
        headers['Nylas-SDK-API-Version'] = SUPPORTED_API_VERSION;
        if (this.clientId != null) {
            headers['X-Nylas-Client-Id'] = this.clientId;
        }
        options.headers = headers;
        if (options.formData) {
            var fd = new form_data_1.default();
            for (var _d = 0, _e = Object.entries(options.formData); _d < _e.length; _d++) {
                var _f = _e[_d], key = _f[0], obj = _f[1];
                if (obj.options) {
                    fd.append(key, obj.value, obj.options);
                }
                else {
                    fd.append(key, obj.value);
                }
            }
            options.body = fd;
        }
        else if (options.body && options.json !== false) {
            options.body = JSON.stringify(options.body);
        }
        return options;
    };
    NylasConnection.prototype.newRequest = function (options) {
        var newOptions = this.requestOptions(options);
        return new node_fetch_1.Request(newOptions.url || '', {
            method: newOptions.method || 'GET',
            headers: newOptions.headers,
            body: newOptions.body,
        });
    };
    NylasConnection.prototype.getWarningForVersion = function (sdkApiVersion, apiVersion) {
        var warning = '';
        if (sdkApiVersion != apiVersion) {
            if (sdkApiVersion && apiVersion) {
                warning +=
                    "WARNING: SDK version may not support your Nylas API version." +
                        (" SDK supports version " + sdkApiVersion + " of the API and your application") +
                        (" is currently running on version " + apiVersion + " of the API.");
                var apiNum = parseInt(apiVersion.split('-')[0]);
                var sdkNum = parseInt(sdkApiVersion.split('-')[0]);
                if (sdkNum > apiNum) {
                    warning += " Please update the version of the API that your application is using through the developer dashboard.";
                }
                else if (apiNum > sdkNum) {
                    warning += " Please update the sdk to ensure it works properly.";
                }
            }
        }
        return warning;
    };
    NylasConnection.prototype.request = function (options) {
        var _this = this;
        var req = this.newRequest(options);
        return new Promise(function (resolve, reject) {
            return node_fetch_1.default(req)
                .then(function (response) {
                if (typeof response === 'undefined') {
                    return reject(new Error('No response'));
                }
                // node headers are lowercaser so this refers to `Nylas-Api-Version`
                var apiVersion = response.headers.get('nylas-api-version');
                var warning = _this.getWarningForVersion(SUPPORTED_API_VERSION, apiVersion);
                if (warning) {
                    console.warn(warning);
                }
                if (response.status > 299) {
                    return response
                        .clone()
                        .json()
                        .then(function (body) {
                        var error = new nylas_api_error_1.default(response.status, body.type, body.message);
                        if (body.missing_fields) {
                            error.missingFields = body.missing_fields;
                        }
                        if (body.server_error) {
                            error.serverError = body.server_error;
                        }
                        return reject(error);
                    })
                        .catch(function () {
                        return response
                            .text()
                            .then(function (text) {
                            var error = new nylas_api_error_1.default(response.status, response.statusText, text);
                            return reject(error);
                        })
                            .catch(function () {
                            var error = new nylas_api_error_1.default(response.status, response.statusText, 'Error encountered during request, unable to extract error message.');
                            return reject(error);
                        });
                    });
                }
                else {
                    if (options.downloadRequest) {
                        response
                            .buffer()
                            .then(function (buffer) {
                            // Return an object with the headers and the body as a buffer
                            var fileDetails = {};
                            response.headers.forEach(function (v, k) {
                                fileDetails[k] = v;
                            });
                            fileDetails['body'] = buffer;
                            return resolve(fileDetails);
                        })
                            .catch(function (e) {
                            return reject(e);
                        });
                    }
                    else if (response.headers.get('content-length') &&
                        Number(response.headers.get('content-length')) == 0) {
                        return resolve(undefined);
                    }
                    else if (response.headers.get('Content-Type') === 'message/rfc822') {
                        return resolve(response.text());
                    }
                    else {
                        return response
                            .clone()
                            .json()
                            .catch(function () { return response.text(); })
                            .then(function (data) { return resolve(data); })
                            .catch(function () { return resolve(undefined); });
                    }
                }
            })
                .catch(function (err) {
                console.error("Error encountered during request:\n" + err.stack);
                return reject(err);
            });
        });
    };
    return NylasConnection;
}());
exports.default = NylasConnection;
