import ManagementModel from './management-model';
import { Attribute } from './attributes';
import NylasConnection from '../nylas-connection';
import Model from './model';
import { SaveCallback } from './restful-model';
export declare type ApplicationIPAddressesProperties = {
    ipAddresses: string[];
    updatedAt: number;
};
export declare class ApplicationIPAddresses extends Model implements ApplicationIPAddressesProperties {
    ipAddresses: string[];
    updatedAt: number;
    static attributes: Record<string, Attribute>;
    constructor(props?: ApplicationIPAddressesProperties);
}
export declare type AccountTokenInfoProperties = {
    scopes: string;
    state: string;
    createdAt: number;
    updatedAt: number;
};
export declare class AccountTokenInfo extends Model implements AccountTokenInfoProperties {
    scopes: string;
    state: string;
    createdAt: number;
    updatedAt: number;
    static attributes: Record<string, Attribute>;
    constructor(props?: AccountTokenInfoProperties);
}
export declare type ManagementAccountProperties = {
    billingState: string;
    emailAddress: string;
    namespaceId: string;
    provider: string;
    syncState: string;
    authenticationType: string;
    trial: boolean;
    metadata?: object;
};
export declare type AccountOperationResponse = {
    success: boolean;
};
export default class ManagementAccount extends ManagementModel implements ManagementAccountProperties {
    billingState: string;
    emailAddress: string;
    namespaceId: string;
    provider: string;
    syncState: string;
    authenticationType: string;
    trial: boolean;
    metadata?: object;
    static collectionName: string;
    static attributes: Record<string, Attribute>;
    constructor(connection: NylasConnection, clientId: string, props: ManagementAccountProperties);
    upgrade(): Promise<AccountOperationResponse>;
    downgrade(): Promise<AccountOperationResponse>;
    revokeAll(keepAccessToken?: string): Promise<AccountOperationResponse>;
    ipAddresses(): Promise<ApplicationIPAddresses>;
    tokenInfo(accessToken?: string): Promise<AccountTokenInfo>;
    save(params?: {} | SaveCallback, callback?: SaveCallback): Promise<this>;
    saveRequestBody(): Record<string, unknown>;
    saveEndpoint(): string;
}
