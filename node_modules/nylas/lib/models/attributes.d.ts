import Model from './model';
declare type AnyModel = new (...args: any[]) => Model;
export declare abstract class Attribute {
    modelKey: string;
    jsonKey: string;
    readOnly: boolean;
    constructor({ modelKey, jsonKey, readOnly, }: {
        modelKey: string;
        jsonKey?: string;
        readOnly?: boolean;
    });
    abstract toJSON(val: any, _parent?: any): any;
    abstract fromJSON(val: any, _parent: any): any;
    saveRequestBody(val: any): any;
}
declare class AttributeObject extends Attribute {
    itemClass?: any;
    constructor({ modelKey, jsonKey, itemClass, readOnly, }: {
        modelKey: string;
        jsonKey?: string;
        itemClass?: AnyModel;
        readOnly?: boolean;
    });
    toJSON(val: any, saveRequestBody?: boolean): unknown;
    fromJSON(val: any, _parent: any): any;
    saveRequestBody(val: any): unknown;
}
declare class AttributeNumber extends Attribute {
    toJSON(val: number): number;
    fromJSON(val: any): number | null;
}
declare class AttributeNumberList extends Attribute {
    toJSON(val: any): number;
    fromJSON(json: any, _parent: any): number[];
}
declare class AttributeBoolean extends Attribute {
    toJSON(val: boolean): boolean;
    fromJSON(val: string | boolean): boolean;
}
declare class AttributeString extends Attribute {
    toJSON(val: string): string;
    fromJSON(val: string): string;
}
declare class AttributeStringList extends Attribute {
    toJSON(val: []): [];
    fromJSON(val: []): [];
}
declare class AttributeDate extends Attribute {
    toJSON(val: Date): string;
    fromJSON(val: any, _parent: any): Date | null;
}
declare class AttributeDateTime extends Attribute {
    toJSON(val: Date): number | null;
    fromJSON(val: number, _parent: any): Date | null;
}
declare class AttributeCollection extends Attribute {
    itemClass: any;
    constructor({ modelKey, jsonKey, itemClass, readOnly, }: {
        modelKey: string;
        jsonKey?: string;
        itemClass: AnyModel;
        readOnly?: boolean;
    });
    toJSON(vals: any, saveRequestBody?: boolean): AnyModel[];
    fromJSON(json: unknown[], _parent: any): AnyModel[];
    saveRequestBody(val: any): AnyModel[] | undefined;
}
declare class AttributeEnum extends Attribute {
    itemClass: any;
    constructor({ modelKey, itemClass, jsonKey, readOnly, }: {
        modelKey: string;
        itemClass: any;
        jsonKey?: string;
        readOnly?: boolean;
    });
    toJSON(val: any): string;
    fromJSON(val: unknown): unknown;
}
declare class AttributeEnumList extends Attribute {
    itemClass: any;
    constructor({ modelKey, itemClass, jsonKey, readOnly, }: {
        modelKey: string;
        itemClass: any;
        jsonKey?: string;
        readOnly?: boolean;
    });
    toJSON(val: any[]): string[];
    fromJSON(val: any[], _parent: any): any[];
}
declare const Attributes: {
    Number(__0: {
        modelKey: string;
        jsonKey?: string | undefined;
        readOnly?: boolean | undefined;
    }): AttributeNumber;
    NumberList(__0: {
        modelKey: string;
        jsonKey?: string | undefined;
        readOnly?: boolean | undefined;
    }): AttributeNumberList;
    String(__0: {
        modelKey: string;
        jsonKey?: string | undefined;
        readOnly?: boolean | undefined;
    }): AttributeString;
    StringList(__0: {
        modelKey: string;
        jsonKey?: string | undefined;
        readOnly?: boolean | undefined;
    }): AttributeStringList;
    DateTime(__0: {
        modelKey: string;
        jsonKey?: string | undefined;
        readOnly?: boolean | undefined;
    }): AttributeDateTime;
    Date(__0: {
        modelKey: string;
        jsonKey?: string | undefined;
        readOnly?: boolean | undefined;
    }): AttributeDate;
    Collection(__0: {
        modelKey: string;
        jsonKey?: string | undefined;
        itemClass: AnyModel;
        readOnly?: boolean | undefined;
    }): AttributeCollection;
    Boolean(__0: {
        modelKey: string;
        jsonKey?: string | undefined;
        readOnly?: boolean | undefined;
    }): AttributeBoolean;
    Object(__0: {
        modelKey: string;
        jsonKey?: string | undefined;
        itemClass?: AnyModel | undefined;
        readOnly?: boolean | undefined;
    }): AttributeObject;
    Enum(__0: {
        modelKey: string;
        itemClass: any;
        jsonKey?: string | undefined;
        readOnly?: boolean | undefined;
    }): AttributeEnum;
    EnumList(__0: {
        modelKey: string;
        itemClass: any;
        jsonKey?: string | undefined;
        readOnly?: boolean | undefined;
    }): AttributeEnumList;
};
export default Attributes;
