"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var message_1 = __importDefault(require("./message"));
var attributes_1 = __importDefault(require("./attributes"));
var Draft = /** @class */ (function (_super) {
    __extends(Draft, _super);
    function Draft(connection, props) {
        var _this = _super.call(this, connection, props) || this;
        _this.initAttributes(props);
        return _this;
    }
    Draft.prototype.fileIds = function () {
        var fileIds = _super.prototype.fileIds.call(this);
        if (this.fileIdsToAttach) {
            fileIds = Array.from(new Set(fileIds.concat(this.fileIdsToAttach)));
        }
        return fileIds;
    };
    Draft.prototype.toJSON = function (enforceReadOnly) {
        if (this.rawMime) {
            throw Error('toJSON() cannot be called for raw MIME drafts');
        }
        var json = _super.prototype.toJSON.call(this, enforceReadOnly);
        json.file_ids = this.fileIds();
        return json;
    };
    Draft.prototype.save = function (params, callback) {
        if (params === void 0) { params = {}; }
        if (this.rawMime) {
            var err = new Error('save() cannot be called for raw MIME drafts');
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        }
        return _super.prototype.save.call(this, params, callback);
    };
    Draft.prototype.saveRequestBody = function () {
        if (this.rawMime) {
            throw Error('saveRequestBody() cannot be called for raw MIME drafts');
        }
        return _super.prototype.saveRequestBody.call(this);
    };
    Draft.prototype.deleteRequestBody = function (params) {
        if (params === void 0) { params = {}; }
        var body = {};
        body.version = params.hasOwnProperty('version')
            ? params.version
            : this.version;
        return body;
    };
    Draft.prototype.toString = function () {
        if (this.rawMime) {
            throw Error('toString() cannot be called for raw MIME drafts');
        }
        return _super.prototype.toString.call(this);
    };
    Draft.prototype.send = function (trackingArg, callbackArg) {
        var _this = this;
        // callback used to be the first argument, and tracking was the second
        var callback;
        if (typeof callbackArg === 'function') {
            callback = callbackArg;
        }
        else if (typeof trackingArg === 'function') {
            callback = trackingArg;
        }
        var tracking;
        if (trackingArg && typeof trackingArg === 'object') {
            tracking = trackingArg;
        }
        else if (callbackArg && typeof callbackArg === 'object') {
            tracking = callbackArg;
        }
        var body = this.rawMime, headers = { 'Content-Type': 'message/rfc822' }, json = false;
        if (!this.rawMime) {
            headers = {};
            json = true;
            if (this.id) {
                body = {
                    draft_id: this.id,
                    version: this.version,
                };
            }
            else {
                body = this.saveRequestBody();
            }
            if (tracking) {
                body['tracking'] = tracking;
            }
        }
        return this.connection
            .request({
            method: 'POST',
            path: '/send',
            headers: headers,
            body: body,
            json: json,
        })
            .then(function (json) {
            var message = new message_1.default(_this.connection).fromJSON(json);
            if (callback) {
                callback(null, message);
            }
            return Promise.resolve(message);
        })
            .catch(function (err) {
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        });
    };
    Draft.collectionName = 'drafts';
    Draft.attributes = __assign(__assign({}, message_1.default.attributes), { version: attributes_1.default.Number({
            modelKey: 'version',
        }), replyToMessageId: attributes_1.default.String({
            modelKey: 'replyToMessageId',
            jsonKey: 'reply_to_message_id',
        }), rawMime: attributes_1.default.String({
            modelKey: 'rawMime',
            readOnly: true,
        }), fileIdsToAttach: attributes_1.default.StringList({
            modelKey: 'fileIdsToAttach',
            readOnly: true,
        }) });
    return Draft;
}(message_1.default));
exports.default = Draft;
