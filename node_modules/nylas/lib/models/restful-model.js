"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var attributes_1 = __importDefault(require("./attributes"));
var model_1 = __importDefault(require("./model"));
var RestfulModel = /** @class */ (function (_super) {
    __extends(RestfulModel, _super);
    function RestfulModel(connection, props) {
        var _this = _super.call(this) || this;
        _this.connection = connection;
        if (!_this.connection) {
            throw new Error('Connection object not provided');
        }
        _this.id = (props === null || props === void 0 ? void 0 : props.id) ? props.id : undefined;
        _this.accountId = (props === null || props === void 0 ? void 0 : props.accountId) ? props.accountId : undefined;
        _this.object = (props === null || props === void 0 ? void 0 : props.object) ? props.object : undefined;
        return _this;
    }
    RestfulModel.propsFromJSON = function (json, parent) {
        if (json === void 0) { json = {}; }
        return _super.propsFromJSON.call(this, json, parent);
    };
    RestfulModel.prototype.isEqual = function (other) {
        return ((other ? other.id : undefined) === this.id &&
            (other ? other.constructor : undefined) === this.constructor);
    };
    RestfulModel.prototype.fromJSON = function (json) {
        if (json === void 0) { json = {}; }
        return _super.prototype.fromJSON.call(this, json);
    };
    // Subclasses should override this method.
    RestfulModel.prototype.pathPrefix = function () {
        return '';
    };
    RestfulModel.prototype.saveEndpoint = function () {
        var collectionName = this.constructor.collectionName;
        return this.pathPrefix() + "/" + collectionName;
    };
    // deleteRequestQueryString is used by delete(). Subclasses should override this method.
    RestfulModel.prototype.deleteRequestQueryString = function (_params) {
        return {};
    };
    // deleteRequestBody is used by delete(). Subclasses should override this method.
    RestfulModel.prototype.deleteRequestBody = function (_params) {
        return {};
    };
    // deleteRequestOptions is used by delete(). Subclasses should override this method.
    RestfulModel.prototype.deleteRequestOptions = function (params) {
        return {
            body: this.deleteRequestBody(params),
            qs: this.deleteRequestQueryString(params),
        };
    };
    // Not every model needs to have a save function, but those who
    // do shouldn't have to reimplement the same boilerplate.
    // They should instead define a save() function which calls _save.
    RestfulModel.prototype.save = function (params, callback) {
        var _this = this;
        if (params === void 0) { params = {}; }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        return this.connection
            .request({
            method: this.id ? 'PUT' : 'POST',
            body: this.saveRequestBody(),
            qs: params,
            path: this.id
                ? this.saveEndpoint() + "/" + this.id
                : "" + this.saveEndpoint(),
            baseUrl: this.baseUrl,
        })
            .then(function (json) {
            var newModel = _this.fromJSON(json);
            if (callback) {
                callback(null, _this);
            }
            return Promise.resolve(newModel);
        })
            .catch(function (err) {
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        });
    };
    RestfulModel.prototype.get = function (params, callback, pathSuffix) {
        if (params === void 0) { params = {}; }
        if (pathSuffix === void 0) { pathSuffix = ''; }
        var collectionName = this.constructor.collectionName;
        return this.connection
            .request({
            method: 'GET',
            path: "/" + collectionName + "/" + this.id + pathSuffix,
            qs: params,
            baseUrl: this.baseUrl,
        })
            .then(function (response) {
            if (callback) {
                callback(null, response);
            }
            return Promise.resolve(response);
        })
            .catch(function (err) {
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        });
    };
    RestfulModel.endpointName = ''; // overrridden in subclasses
    RestfulModel.collectionName = ''; // overrridden in subclasses
    RestfulModel.attributes = {
        id: attributes_1.default.String({
            modelKey: 'id',
            readOnly: true,
        }),
        object: attributes_1.default.String({
            modelKey: 'object',
            readOnly: true,
        }),
        accountId: attributes_1.default.String({
            modelKey: 'accountId',
            jsonKey: 'account_id',
            readOnly: true,
        }),
    };
    return RestfulModel;
}(model_1.default));
exports.default = RestfulModel;
