"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var model_1 = __importDefault(require("./model"));
var attributes_1 = __importDefault(require("./attributes"));
var account_1 = __importDefault(require("./account"));
var Scope;
(function (Scope) {
    Scope["Email"] = "email";
    Scope["EmailModify"] = "email.modify";
    Scope["EmailReadOnly"] = "email.read_only";
    Scope["EmailSend"] = "email.send";
    Scope["EmailFoldersAndLabels"] = "email.folders_and_labels";
    Scope["EmailMetadata"] = "email.metadata";
    Scope["EmailDrafts"] = "email.drafts";
    Scope["Calendar"] = "calendar";
    Scope["CalendarReadOnly"] = "calendar.read_only";
    Scope["RoomResourcesReadOnly"] = "room_resources.read_only";
    Scope["Contacts"] = "contacts";
    Scope["ContactsReadOnly"] = "contacts.read_only";
})(Scope = exports.Scope || (exports.Scope = {}));
var VirtualCalendar = /** @class */ (function (_super) {
    __extends(VirtualCalendar, _super);
    function VirtualCalendar(props) {
        var _this = _super.call(this) || this;
        _this.provider = 'nylas';
        _this.name = '';
        _this.emailAddress = '';
        _this.settings = {};
        _this.initAttributes(props);
        _this.scopes = [Scope.Calendar];
        return _this;
    }
    VirtualCalendar.attributes = {
        provider: attributes_1.default.String({
            modelKey: 'provider',
        }),
        clientId: attributes_1.default.String({
            modelKey: 'clientId',
            jsonKey: 'client_id',
        }),
        emailAddress: attributes_1.default.String({
            modelKey: 'emailAddress',
            jsonKey: 'email',
        }),
        name: attributes_1.default.String({
            modelKey: 'name',
        }),
        scopes: attributes_1.default.EnumList({
            modelKey: 'scopes',
            itemClass: Scope,
        }),
        settings: attributes_1.default.Object({
            modelKey: 'settings',
        }),
    };
    return VirtualCalendar;
}(model_1.default));
exports.VirtualCalendar = VirtualCalendar;
var NativeAuthenticationProvider;
(function (NativeAuthenticationProvider) {
    NativeAuthenticationProvider["Gmail"] = "gmail";
    NativeAuthenticationProvider["Yahoo"] = "yahoo";
    NativeAuthenticationProvider["Exchange"] = "exchange";
    NativeAuthenticationProvider["Outlook"] = "outlook";
    NativeAuthenticationProvider["Imap"] = "imap";
    NativeAuthenticationProvider["Icloud"] = "icloud";
    NativeAuthenticationProvider["Hotmail"] = "hotmail";
    NativeAuthenticationProvider["Aol"] = "aol";
    NativeAuthenticationProvider["Office365"] = "office365";
})(NativeAuthenticationProvider = exports.NativeAuthenticationProvider || (exports.NativeAuthenticationProvider = {}));
var NativeAuthentication = /** @class */ (function (_super) {
    __extends(NativeAuthentication, _super);
    function NativeAuthentication(props) {
        var _this = _super.call(this) || this;
        _this.name = '';
        _this.emailAddress = '';
        _this.provider = NativeAuthenticationProvider.Gmail;
        _this.settings = {};
        _this.scopes = [];
        _this.initAttributes(props);
        return _this;
    }
    NativeAuthentication.prototype.toJSON = function () {
        var json = _super.prototype.toJSON.call(this);
        json['scopes'] = this.scopes.join();
        return json;
    };
    NativeAuthentication.prototype.fromJSON = function (json) {
        if (json['scopes']) {
            json['scopes'] = json['scopes'].split(',');
        }
        return _super.prototype.fromJSON.call(this, json);
    };
    NativeAuthentication.attributes = {
        clientId: attributes_1.default.String({
            modelKey: 'clientId',
            jsonKey: 'client_id',
        }),
        name: attributes_1.default.String({
            modelKey: 'name',
        }),
        emailAddress: attributes_1.default.String({
            modelKey: 'emailAddress',
            jsonKey: 'email_address',
        }),
        provider: attributes_1.default.Enum({
            modelKey: 'provider',
            itemClass: NativeAuthenticationProvider,
        }),
        scopes: attributes_1.default.EnumList({
            modelKey: 'scopes',
            itemClass: Scope,
        }),
        settings: attributes_1.default.Object({
            modelKey: 'settings',
        }),
    };
    return NativeAuthentication;
}(model_1.default));
exports.NativeAuthentication = NativeAuthentication;
var Connect = /** @class */ (function () {
    function Connect(connection, clientId, clientSecret) {
        this.connection = connection;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
    }
    Connect.prototype.authorize = function (auth) {
        // https://docs.nylas.com/reference#connectauthorize
        if (!this.clientId) {
            throw new Error('connect.authorize() cannot be called until you provide a clientId via Nylas.config()');
        }
        var authClass;
        if (!auth.clientId) {
            auth.clientId = this.clientId;
        }
        if (auth.hasOwnProperty('provider') && auth.provider != 'nylas') {
            authClass = new NativeAuthentication(auth);
        }
        else {
            authClass = new VirtualCalendar(auth);
        }
        return this.connection
            .request({
            method: 'POST',
            path: '/connect/authorize',
            body: authClass.toJSON(),
        })
            .then(function (json) {
            return json;
        });
    };
    Connect.prototype.token = function (code) {
        var _this = this;
        // https://docs.nylas.com/reference#connecttoken
        if (!this.clientId) {
            throw new Error('connect.token() cannot be called until you provide a clientId via Nylas.config()');
        }
        if (!this.clientSecret) {
            throw new Error('connect.token() cannot be called until you provide a clientSecret via Nylas.config()');
        }
        return this.connection
            .request({
            method: 'POST',
            path: '/connect/token',
            body: {
                client_id: this.clientId,
                client_secret: this.clientSecret,
                code: code,
            },
        })
            .then(function (json) {
            return new account_1.default(_this.connection).fromJSON(json);
        });
    };
    return Connect;
}());
exports.default = Connect;
