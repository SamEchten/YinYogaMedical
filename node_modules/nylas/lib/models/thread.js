"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var message_1 = __importDefault(require("./message"));
var restful_model_1 = __importDefault(require("./restful-model"));
var attributes_1 = __importDefault(require("./attributes"));
var email_participant_1 = __importDefault(require("./email-participant"));
var folder_1 = __importStar(require("./folder"));
var Thread = /** @class */ (function (_super) {
    __extends(Thread, _super);
    function Thread(connection, props) {
        var _this = _super.call(this, connection, props) || this;
        _this.subject = '';
        _this.participants = [];
        _this.lastMessageTimestamp = new Date();
        _this.lastMessageReceivedTimestamp = new Date();
        _this.firstMessageTimestamp = new Date();
        _this.messageIds = [];
        _this.snippet = '';
        _this.unread = false;
        _this.starred = false;
        _this.version = '';
        _this.initAttributes(props);
        return _this;
    }
    Thread.prototype.saveRequestBody = function () {
        var json = {};
        if (this.labels) {
            json['label_ids'] = this.labels.map(function (label) { return label.id; });
        }
        else if (this.folders && this.folders.length === 1) {
            json['folder_id'] = this.folders[0].id;
        }
        json['starred'] = this.starred;
        json['unread'] = this.unread;
        return json;
    };
    Thread.prototype.save = function (params, callback) {
        if (params === void 0) { params = {}; }
        return _super.prototype.save.call(this, params, callback);
    };
    Thread.collectionName = 'threads';
    Thread.attributes = __assign(__assign({}, restful_model_1.default.attributes), { subject: attributes_1.default.String({
            modelKey: 'subject',
        }), participants: attributes_1.default.Collection({
            modelKey: 'participants',
            itemClass: email_participant_1.default,
        }), lastMessageTimestamp: attributes_1.default.DateTime({
            modelKey: 'lastMessageTimestamp',
            jsonKey: 'last_message_timestamp',
        }), lastMessageReceivedTimestamp: attributes_1.default.DateTime({
            modelKey: 'lastMessageReceivedTimestamp',
            jsonKey: 'last_message_received_timestamp',
        }), lastMessageSentTimestamp: attributes_1.default.DateTime({
            modelKey: 'lastMessageSentTimestamp',
            jsonKey: 'last_message_sent_timestamp',
        }), firstMessageTimestamp: attributes_1.default.DateTime({
            modelKey: 'firstMessageTimestamp',
            jsonKey: 'first_message_timestamp',
        }), snippet: attributes_1.default.String({
            modelKey: 'snippet',
        }), unread: attributes_1.default.Boolean({
            modelKey: 'unread',
        }), starred: attributes_1.default.Boolean({
            modelKey: 'starred',
        }), hasAttachments: attributes_1.default.Boolean({
            modelKey: 'has_attachments',
        }), version: attributes_1.default.String({
            modelKey: 'version',
            jsonKey: 'version',
        }), folders: attributes_1.default.Collection({
            modelKey: 'folders',
            itemClass: folder_1.default,
            jsonKey: 'folders',
        }), labels: attributes_1.default.Collection({
            modelKey: 'labels',
            itemClass: folder_1.Label,
            jsonKey: 'labels',
        }), messageIds: attributes_1.default.StringList({
            modelKey: 'messageIds',
            jsonKey: 'message_ids',
        }), draftIds: attributes_1.default.StringList({
            modelKey: 'draftIds',
            jsonKey: 'draft_ids',
        }), messages: attributes_1.default.Collection({
            modelKey: 'messages',
            itemClass: message_1.default,
        }), drafts: attributes_1.default.Collection({
            modelKey: 'drafts',
            itemClass: message_1.default,
        }) });
    return Thread;
}(restful_model_1.default));
exports.default = Thread;
