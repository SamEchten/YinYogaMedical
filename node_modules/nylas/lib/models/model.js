"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Model = /** @class */ (function () {
    function Model() {
    }
    Model.propsFromJSON = function (json, parent) {
        var props = {};
        for (var attrName in this.attributes) {
            var attr = this.attributes[attrName];
            if (json[attr.jsonKey] !== undefined) {
                props[attrName] = attr.fromJSON(json[attr.jsonKey], parent);
            }
        }
        return props;
    };
    Model.prototype.attributes = function () {
        return this.constructor.attributes;
    };
    Model.prototype.initAttributes = function (props) {
        var attributes = this.attributes();
        for (var prop in props) {
            if (props.hasOwnProperty(prop)) {
                var attr = attributes[prop];
                if (attr) {
                    this[prop] = attr.fromJSON(props[prop], this);
                }
            }
        }
    };
    Model.prototype.fromJSON = function (json) {
        var attributes = this.attributes();
        for (var attrName in attributes) {
            var attr = attributes[attrName];
            if (json[attr.jsonKey] !== undefined) {
                this[attrName] = attr.fromJSON(json[attr.jsonKey], this);
            }
        }
        return this;
    };
    Model.prototype.toJSON = function (enforceReadOnly) {
        var json = {};
        var attributes = this.attributes();
        for (var attrName in attributes) {
            var attr = attributes[attrName];
            if (enforceReadOnly === true) {
                json[attr.jsonKey] = attr.saveRequestBody(this[attrName]);
            }
            else {
                json[attr.jsonKey] = attr.toJSON(this[attrName]);
            }
        }
        return json;
    };
    // saveRequestBody is used by save(). It returns a JSON dict containing only the
    // fields the API allows updating. Subclasses should override this method.
    Model.prototype.saveRequestBody = function () {
        return this.toJSON(true);
    };
    Model.prototype.toString = function () {
        return JSON.stringify(this.toJSON());
    };
    return Model;
}());
exports.default = Model;
