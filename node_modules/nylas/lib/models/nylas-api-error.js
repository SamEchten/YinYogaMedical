"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Extended Error class for errors returned from the Nylas API
 *
 * Properties:
 * name - The description of the HTTP status code
 * message - The error message returned from the Nylas API payload
 * statusCode - The status code returned from the API call
 * type - The type of error returned from the Nylas API payload
 * stack - The Error stacktrace
 * missingFields (optional) - The fields that were missing in the call returned from the Nylas API payload
 * serverError (optional) - The error returned by the provider returned from the Nylas API payload
 */
var NylasApiError = /** @class */ (function (_super) {
    __extends(NylasApiError, _super);
    function NylasApiError(statusCode, type, message) {
        var _this = _super.call(this, message) || this;
        /**
         * Mapping of HTTP status codes to error descriptions
         *
         * For more details on what each status code means head to
         * https://developer.nylas.com/docs/developer-tools/api/errors/
         */
        _this.errorMapping = {
            400: 'Bad Request',
            401: 'Unauthorized',
            402: 'Request Failed or Payment Required',
            403: 'Forbidden',
            404: 'Not Found',
            405: 'Method Not Allowed',
            410: 'Gone',
            418: "I'm a Teapot",
            422: 'Sending Error',
            429: 'Too Many Requests',
            500: 'Server Error',
            502: 'Server Error',
            503: 'Server Error',
            504: 'Server Error',
        };
        _this.statusCode = statusCode;
        _this.name = _this.errorMapping[statusCode];
        _this.type = type;
        return _this;
    }
    return NylasApiError;
}(Error));
exports.default = NylasApiError;
