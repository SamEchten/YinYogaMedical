"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var model_1 = __importDefault(require("./model"));
var attributes_1 = __importDefault(require("./attributes"));
var When = /** @class */ (function (_super) {
    __extends(When, _super);
    function When(props) {
        var _this = _super.call(this) || this;
        _this.initAttributes(props);
        return _this;
    }
    // Helper method to check if the When object is actually set properly or not
    When.prototype.isSet = function () {
        return ((this.startTime != undefined && this.endTime != undefined) ||
            this.time != undefined ||
            (this.startDate != undefined && this.endDate != undefined) ||
            this.date != undefined);
    };
    When.attributes = {
        startTime: attributes_1.default.Number({
            modelKey: 'startTime',
            jsonKey: 'start_time',
        }),
        endTime: attributes_1.default.Number({
            modelKey: 'endTime',
            jsonKey: 'end_time',
        }),
        time: attributes_1.default.Number({
            modelKey: 'time',
        }),
        startDate: attributes_1.default.String({
            modelKey: 'startDate',
            jsonKey: 'start_date',
        }),
        endDate: attributes_1.default.String({
            modelKey: 'endDate',
            jsonKey: 'end_date',
        }),
        date: attributes_1.default.String({
            modelKey: 'date',
        }),
        object: attributes_1.default.String({
            modelKey: 'object',
            readOnly: true,
        }),
    };
    return When;
}(model_1.default));
exports.default = When;
