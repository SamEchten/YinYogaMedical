"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var restful_model_1 = __importDefault(require("./restful-model"));
var attributes_1 = __importDefault(require("./attributes"));
var model_1 = __importDefault(require("./model"));
var calendar_1 = __importDefault(require("./calendar"));
var SchedulerAvailableCalendars = /** @class */ (function (_super) {
    __extends(SchedulerAvailableCalendars, _super);
    function SchedulerAvailableCalendars(props) {
        var _this = _super.call(this) || this;
        _this.id = '';
        _this.name = '';
        _this.email = '';
        _this.calendars = [];
        _this.initAttributes(props);
        return _this;
    }
    Object.defineProperty(SchedulerAvailableCalendars.prototype, "connection", {
        get: function () {
            return this._connection;
        },
        enumerable: true,
        configurable: true
    });
    SchedulerAvailableCalendars.prototype.fromJSON = function (json, connection) {
        // Allow a connection object to be passed in to instantiate a Calendar sub object
        if (connection) {
            this._connection = connection;
        }
        return _super.prototype.fromJSON.call(this, json);
    };
    SchedulerAvailableCalendars.attributes = {
        calendars: attributes_1.default.Collection({
            modelKey: 'calendars',
            itemClass: calendar_1.default,
        }),
        email: attributes_1.default.String({
            modelKey: 'email',
        }),
        id: attributes_1.default.String({
            modelKey: 'id',
        }),
        name: attributes_1.default.String({
            modelKey: 'name',
        }),
    };
    return SchedulerAvailableCalendars;
}(model_1.default));
exports.SchedulerAvailableCalendars = SchedulerAvailableCalendars;
var SchedulerAppearance = /** @class */ (function (_super) {
    __extends(SchedulerAppearance, _super);
    function SchedulerAppearance(props) {
        var _this = _super.call(this) || this;
        _this.initAttributes(props);
        return _this;
    }
    SchedulerAppearance.attributes = {
        color: attributes_1.default.String({
            modelKey: 'color',
        }),
        companyName: attributes_1.default.String({
            modelKey: 'companyName',
            jsonKey: 'company_name',
        }),
        logo: attributes_1.default.String({
            modelKey: 'logo',
        }),
        privacyPolicyRedirect: attributes_1.default.String({
            modelKey: 'privacyPolicyRedirect',
            jsonKey: 'privacy_policy_redirect',
        }),
        showAutoschedule: attributes_1.default.Boolean({
            modelKey: 'showAutoschedule',
            jsonKey: 'show_autoschedule',
        }),
        showNylasBranding: attributes_1.default.Boolean({
            modelKey: 'showNylasBranding',
            jsonKey: 'show_nylas_branding',
        }),
        showTimezoneOptions: attributes_1.default.Boolean({
            modelKey: 'showTimezoneOptions',
            jsonKey: 'show_timezone_options',
        }),
        showWeekView: attributes_1.default.Boolean({
            modelKey: 'showWeekView',
            jsonKey: 'show_week_view',
        }),
        submitText: attributes_1.default.String({
            modelKey: 'submitText',
            jsonKey: 'submit_text',
        }),
        thankYouRedirect: attributes_1.default.String({
            modelKey: 'thankYouRedirect',
            jsonKey: 'thank_you_redirect',
        }),
        thankYouText: attributes_1.default.String({
            modelKey: 'thankYouText',
            jsonKey: 'thank_you_text',
        }),
        thankYouTextSecondary: attributes_1.default.String({
            modelKey: 'thankYouTextSecondary',
            jsonKey: 'thank_you_text_secondary',
        }),
    };
    return SchedulerAppearance;
}(model_1.default));
exports.SchedulerAppearance = SchedulerAppearance;
var SchedulerBookingAdditionalFields = /** @class */ (function (_super) {
    __extends(SchedulerBookingAdditionalFields, _super);
    function SchedulerBookingAdditionalFields(props) {
        var _this = _super.call(this) || this;
        _this.initAttributes(props);
        return _this;
    }
    SchedulerBookingAdditionalFields.attributes = {
        dropdownOptions: attributes_1.default.StringList({
            modelKey: 'dropdownOptions',
            jsonKey: 'dropdown_options',
        }),
        label: attributes_1.default.String({
            modelKey: 'label',
        }),
        multiSelectOptions: attributes_1.default.StringList({
            modelKey: 'multiSelectOptions',
            jsonKey: 'multi_select_options',
        }),
        name: attributes_1.default.String({
            modelKey: 'name',
        }),
        order: attributes_1.default.Number({
            modelKey: 'order',
        }),
        pattern: attributes_1.default.String({
            modelKey: 'pattern',
        }),
        required: attributes_1.default.Boolean({
            modelKey: 'required',
        }),
        type: attributes_1.default.String({
            modelKey: 'type',
        }),
    };
    return SchedulerBookingAdditionalFields;
}(model_1.default));
exports.SchedulerBookingAdditionalFields = SchedulerBookingAdditionalFields;
var SchedulerBookingOpeningHours = /** @class */ (function (_super) {
    __extends(SchedulerBookingOpeningHours, _super);
    function SchedulerBookingOpeningHours(props) {
        var _this = _super.call(this) || this;
        _this.initAttributes(props);
        return _this;
    }
    SchedulerBookingOpeningHours.attributes = {
        dropdownOptions: attributes_1.default.String({
            modelKey: 'accountId',
            jsonKey: 'account_id',
        }),
        days: attributes_1.default.StringList({
            modelKey: 'days',
        }),
        end: attributes_1.default.String({
            modelKey: 'end',
        }),
        start: attributes_1.default.String({
            modelKey: 'start',
        }),
    };
    return SchedulerBookingOpeningHours;
}(model_1.default));
exports.SchedulerBookingOpeningHours = SchedulerBookingOpeningHours;
var SchedulerBooking = /** @class */ (function (_super) {
    __extends(SchedulerBooking, _super);
    function SchedulerBooking(props) {
        var _this = _super.call(this) || this;
        _this.initAttributes(props);
        return _this;
    }
    SchedulerBooking.attributes = {
        additionalFields: attributes_1.default.Collection({
            modelKey: 'additionalFields',
            jsonKey: 'additional_fields',
            itemClass: SchedulerBookingAdditionalFields,
        }),
        additionalGuestsHidden: attributes_1.default.Boolean({
            modelKey: 'additionalGuestsHidden',
            jsonKey: 'additional_guests_hidden',
        }),
        availableDaysInFuture: attributes_1.default.Number({
            modelKey: 'availableDaysInFuture',
            jsonKey: 'available_days_in_future',
        }),
        calendarInviteToGuests: attributes_1.default.Boolean({
            modelKey: 'calendarInviteToGuests',
            jsonKey: 'calendar_invites_to_guests',
        }),
        cancellationPolicy: attributes_1.default.String({
            modelKey: 'cancellationPolicy',
            jsonKey: 'cancellation_policy',
        }),
        confirmationEmailsToGuests: attributes_1.default.Boolean({
            modelKey: 'confirmationEmailsToGuests',
            jsonKey: 'confirmation_emails_to_guests',
        }),
        confirmationEmailToHost: attributes_1.default.Boolean({
            modelKey: 'confirmationEmailToHost',
            jsonKey: 'confirmation_email_to_host',
        }),
        confirmationMethod: attributes_1.default.String({
            modelKey: 'confirmationMethod',
            jsonKey: 'confirmation_method',
        }),
        minBookingNotice: attributes_1.default.Number({
            modelKey: 'minBookingNotice',
            jsonKey: 'min_booking_notice',
        }),
        minBuffer: attributes_1.default.Number({
            modelKey: 'minBuffer',
            jsonKey: 'min_buffer',
        }),
        minCancellationNotice: attributes_1.default.Number({
            modelKey: 'minCancellationNotice',
            jsonKey: 'min_cancellation_notice',
        }),
        nameFieldHidden: attributes_1.default.Boolean({
            modelKey: 'nameFieldHidden',
            jsonKey: 'name_field_hidden',
        }),
        openingHours: attributes_1.default.Collection({
            modelKey: 'openingHours',
            jsonKey: 'opening_hours',
            itemClass: SchedulerBookingOpeningHours,
        }),
        schedulingMethod: attributes_1.default.String({
            modelKey: 'schedulingMethod',
            jsonKey: 'scheduling_method',
        }),
    };
    return SchedulerBooking;
}(model_1.default));
exports.SchedulerBooking = SchedulerBooking;
var SchedulerReminders = /** @class */ (function (_super) {
    __extends(SchedulerReminders, _super);
    function SchedulerReminders(props) {
        var _this = _super.call(this) || this;
        _this.initAttributes(props);
        return _this;
    }
    SchedulerReminders.attributes = {
        deliveryMethod: attributes_1.default.String({
            modelKey: 'deliveryMethod',
            jsonKey: 'delivery_method',
        }),
        deliveryRecipient: attributes_1.default.String({
            modelKey: 'deliveryRecipient',
            jsonKey: 'delivery_recipient',
        }),
        emailSubject: attributes_1.default.String({
            modelKey: 'emailSubject',
            jsonKey: 'email_subject',
        }),
        timeBeforeEvent: attributes_1.default.Number({
            modelKey: 'timeBeforeEvent',
            jsonKey: 'time_before_event',
        }),
        webhookUrl: attributes_1.default.String({
            modelKey: 'webhookUrl',
            jsonKey: 'webhook_url',
        }),
    };
    return SchedulerReminders;
}(model_1.default));
exports.SchedulerReminders = SchedulerReminders;
var SchedulerConfig = /** @class */ (function (_super) {
    __extends(SchedulerConfig, _super);
    function SchedulerConfig(props) {
        var _this = _super.call(this) || this;
        _this.initAttributes(props);
        return _this;
    }
    SchedulerConfig.attributes = {
        appearance: attributes_1.default.Object({
            modelKey: 'appearance',
            itemClass: SchedulerAppearance,
        }),
        booking: attributes_1.default.Object({
            modelKey: 'booking',
            itemClass: SchedulerBooking,
        }),
        calendarIds: attributes_1.default.Object({
            modelKey: 'calendarIds',
            jsonKey: 'calendar_ids',
        }),
        event: attributes_1.default.Object({
            modelKey: 'event',
        }),
        expireAfter: attributes_1.default.Object({
            modelKey: 'expireAfter',
            jsonKey: 'expire_after',
        }),
        disableEmails: attributes_1.default.Boolean({
            modelKey: 'disableEmails',
            jsonKey: 'disable_emails',
        }),
        locale: attributes_1.default.String({
            modelKey: 'locale',
        }),
        localeForGuests: attributes_1.default.String({
            modelKey: 'localeForGuests',
            jsonKey: 'locale_for_guests',
        }),
        reminders: attributes_1.default.Collection({
            modelKey: 'reminders',
            itemClass: SchedulerReminders,
        }),
        timezone: attributes_1.default.String({
            modelKey: 'timezone',
        }),
    };
    return SchedulerConfig;
}(model_1.default));
exports.SchedulerConfig = SchedulerConfig;
var Scheduler = /** @class */ (function (_super) {
    __extends(Scheduler, _super);
    function Scheduler(connection, props) {
        var _this = _super.call(this, connection, props) || this;
        _this.initAttributes(props);
        _this.baseUrl = 'https://api.schedule.nylas.com';
        return _this;
    }
    Scheduler.prototype.save = function (params, callback) {
        if (params === void 0) { params = {}; }
        return _super.prototype.save.call(this, params, callback);
    };
    Scheduler.prototype.getAvailableCalendars = function () {
        var _this = this;
        if (!this.id) {
            throw new Error('Cannot get calendars for a page without an ID.');
        }
        return this.connection
            .request({
            method: 'GET',
            path: "/manage/pages/" + this.id + "/calendars",
            headers: {
                'Content-Type': 'application/json',
            },
            baseUrl: this.baseUrl,
        })
            .then(function (json) {
            var calendars = json.map(function (cal) {
                return new SchedulerAvailableCalendars().fromJSON(cal, _this.connection);
            });
            return Promise.resolve(calendars);
        });
    };
    Scheduler.prototype.uploadImage = function (contentType, objectName) {
        if (!this.id) {
            throw new Error('Cannot upload an image to a page without an ID.');
        }
        return this.connection.request({
            method: 'PUT',
            path: "/manage/pages/" + this.id + "/upload-image",
            headers: {
                'Content-Type': 'application/json',
            },
            body: {
                contentType: contentType,
                objectName: objectName,
            },
            baseUrl: this.baseUrl,
        });
    };
    Scheduler.collectionName = 'manage/pages';
    Scheduler.attributes = __assign(__assign({}, restful_model_1.default.attributes), { accessTokens: attributes_1.default.StringList({
            modelKey: 'accessTokens',
            jsonKey: 'access_tokens',
        }), appClientId: attributes_1.default.String({
            modelKey: 'appClientId',
            jsonKey: 'app_client_id',
            readOnly: true,
        }), appOrganizationId: attributes_1.default.Number({
            modelKey: 'appOrganizationId',
            jsonKey: 'app_organization_id',
            readOnly: true,
        }), config: attributes_1.default.Object({
            modelKey: 'config',
            itemClass: SchedulerConfig,
        }), editToken: attributes_1.default.String({
            modelKey: 'editToken',
            jsonKey: 'edit_token',
            readOnly: true,
        }), name: attributes_1.default.String({
            modelKey: 'name',
        }), slug: attributes_1.default.String({
            modelKey: 'slug',
        }), createdAt: attributes_1.default.Date({
            modelKey: 'createdAt',
            jsonKey: 'created_at',
            readOnly: true,
        }), modifiedAt: attributes_1.default.Date({
            modelKey: 'modifiedAt',
            jsonKey: 'modified_at',
            readOnly: true,
        }) });
    return Scheduler;
}(restful_model_1.default));
exports.default = Scheduler;
