"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var message_1 = __importDefault(require("./message"));
var thread_1 = __importDefault(require("./thread"));
var model_collection_1 = __importDefault(require("./model-collection"));
var RestfulModelCollection = /** @class */ (function (_super) {
    __extends(RestfulModelCollection, _super);
    function RestfulModelCollection(modelClass, connection) {
        var _this = _super.call(this, modelClass, connection, modelClass.collectionName) || this;
        _this.modelClass = modelClass;
        _this._path = "/" + _this.modelClass.collectionName;
        return _this;
    }
    RestfulModelCollection.prototype.count = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this.connection
            .request({
            method: 'GET',
            path: this.path(),
            qs: __assign({ view: 'count' }, params),
            baseUrl: this.baseUrl,
        })
            .then(function (json) {
            if (callback) {
                callback(null, json.count);
            }
            return Promise.resolve(json.count);
        })
            .catch(function (err) {
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        });
    };
    RestfulModelCollection.prototype.first = function (params, callback) {
        if (params === void 0) { params = {}; }
        if (params.view == 'count') {
            var err = new Error('first() cannot be called with the count view');
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        }
        return this.getItems(params, 0, 1)
            .then(function (items) {
            if (callback) {
                callback(null, items[0]);
            }
            return Promise.resolve(items[0]);
        })
            .catch(function (err) {
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        });
    };
    RestfulModelCollection.prototype.search = function (query, params, callback) {
        if (params === void 0) { params = {}; }
        if (this.modelClass != message_1.default && this.modelClass != thread_1.default) {
            var err = new Error('search() can only be called for messages and threads');
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        }
        if (!query) {
            var err = new Error('search() requires a query string');
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        }
        params.q = query;
        var limit = params.limit || 40;
        var offset = params.offset;
        var path = this.path() + "/search";
        return this.range({ params: params, offset: offset, limit: limit, path: path });
    };
    RestfulModelCollection.prototype.delete = function (itemOrId, params, callback) {
        if (params === void 0) { params = {}; }
        if (!itemOrId) {
            var err = new Error('delete() requires an item or an id');
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        }
        if (typeof params === 'function') {
            callback = params;
            params = {};
        }
        var item = typeof itemOrId === 'string' ? this.build({ id: itemOrId }) : itemOrId;
        var options = item.deleteRequestOptions(params);
        options.item = item;
        return this.deleteItem(options, callback);
    };
    RestfulModelCollection.prototype.deleteItem = function (options, callbackArg) {
        var item = options.item;
        // callback used to be in the options object
        var callback = options.callback ? options.callback : callbackArg;
        var body = options.hasOwnProperty('body')
            ? options.body
            : item.deleteRequestBody({});
        var qs = options.hasOwnProperty('qs')
            ? options.qs
            : item.deleteRequestQueryString({});
        return this.connection
            .request({
            method: 'DELETE',
            qs: qs,
            body: body,
            path: this.path() + "/" + item.id,
            baseUrl: this.baseUrl,
        })
            .then(function (data) {
            if (callback) {
                callback(null, data);
            }
            return Promise.resolve(data);
        })
            .catch(function (err) {
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        });
    };
    RestfulModelCollection.prototype.build = function (args) {
        var model = this.createModel({});
        for (var key in args) {
            model[key] = args[key];
        }
        return model;
    };
    RestfulModelCollection.prototype.createModel = function (json) {
        return new this.modelClass(this.connection).fromJSON(json);
    };
    return RestfulModelCollection;
}(model_collection_1.default));
exports.default = RestfulModelCollection;
