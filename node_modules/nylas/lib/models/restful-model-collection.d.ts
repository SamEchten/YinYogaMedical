import NylasConnection from '../nylas-connection';
import RestfulModel from './restful-model';
import ModelCollection from './model-collection';
export declare type GetCallback = (error: Error | null, result?: RestfulModel) => void;
export default class RestfulModelCollection<T extends RestfulModel> extends ModelCollection<any> {
    modelClass: typeof RestfulModel;
    constructor(modelClass: typeof RestfulModel, connection: NylasConnection);
    count(params?: Record<string, unknown>, callback?: (err: Error | null, num?: number) => void): Promise<number>;
    first(params?: Record<string, unknown>, callback?: (error: Error | null, model?: T) => void): Promise<T>;
    search(query: string, params?: Record<string, unknown>, callback?: (error: Error | null) => void): Promise<T[]>;
    delete(itemOrId: T | string, params?: Record<string, unknown>, callback?: (error: Error | null) => void): any;
    deleteItem(options: Record<string, any>, callbackArg?: (error: Error | null) => void): any;
    protected build(args: Record<string, unknown>): T;
    protected createModel(json: Record<string, unknown>): T;
}
