"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var restful_model_1 = __importDefault(require("./restful-model"));
var neural_sentiment_analysis_1 = __importDefault(require("./neural-sentiment-analysis"));
var neural_signature_extraction_1 = __importDefault(require("./neural-signature-extraction"));
var neural_ocr_1 = __importDefault(require("./neural-ocr"));
var neural_categorizer_1 = __importDefault(require("./neural-categorizer"));
var neural_clean_conversation_1 = __importDefault(require("./neural-clean-conversation"));
var model_1 = __importDefault(require("./model"));
var attributes_1 = __importDefault(require("./attributes"));
var NeuralMessageOptions = /** @class */ (function (_super) {
    __extends(NeuralMessageOptions, _super);
    function NeuralMessageOptions(props) {
        var _this = _super.call(this) || this;
        _this.initAttributes(props);
        return _this;
    }
    NeuralMessageOptions.prototype.toJSON = function (writeParseContact) {
        var body = _super.prototype.toJSON.call(this);
        if (writeParseContact !== true) {
            delete body['parse_contacts'];
        }
        return body;
    };
    NeuralMessageOptions.attributes = {
        ignoreLinks: attributes_1.default.Boolean({
            modelKey: 'ignoreLinks',
            jsonKey: 'ignore_links',
        }),
        ignoreImages: attributes_1.default.Boolean({
            modelKey: 'ignoreImages',
            jsonKey: 'ignore_images',
        }),
        ignoreTables: attributes_1.default.Boolean({
            modelKey: 'ignoreTables',
            jsonKey: 'ignore_tables',
        }),
        removeConclusionPhrases: attributes_1.default.Boolean({
            modelKey: 'removeConclusionPhrases',
            jsonKey: 'remove_conclusion_phrases',
        }),
        imagesAsMarkdown: attributes_1.default.Boolean({
            modelKey: 'imagesAsMarkdown',
            jsonKey: 'images_as_markdown',
        }),
        parseContacts: attributes_1.default.Boolean({
            modelKey: 'parseContacts',
            jsonKey: 'parse_contacts',
        }),
    };
    return NeuralMessageOptions;
}(model_1.default));
exports.NeuralMessageOptions = NeuralMessageOptions;
var Neural = /** @class */ (function (_super) {
    __extends(Neural, _super);
    function Neural() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Neural.prototype.sentimentAnalysisMessage = function (messageIds) {
        var _this = this;
        var body = { message_id: messageIds };
        var path = 'sentiment';
        return this.request(path, body).then(function (jsonArray) {
            return jsonArray.map(function (json) {
                return new neural_sentiment_analysis_1.default(_this.connection).fromJSON(json);
            });
        });
    };
    Neural.prototype.sentimentAnalysisText = function (text) {
        var _this = this;
        var body = { text: text };
        var path = 'sentiment';
        return this.request(path, body).then(function (json) {
            return new neural_sentiment_analysis_1.default(_this.connection).fromJSON(json);
        });
    };
    Neural.prototype.extractSignature = function (messageIds, options) {
        var _this = this;
        var body = { message_id: messageIds };
        var path = 'signature';
        if (options) {
            body = __assign(__assign({}, body), new NeuralMessageOptions(options).toJSON(true));
        }
        return this.request(path, body).then(function (jsonArray) {
            return jsonArray.map(function (json) {
                return new neural_signature_extraction_1.default(_this.connection).fromJSON(json);
            });
        });
    };
    Neural.prototype.ocrRequest = function (fileId, pages) {
        var _this = this;
        var body = { file_id: fileId };
        var path = 'ocr';
        if (pages) {
            body['pages'] = pages;
        }
        return this.request(path, body).then(function (json) {
            return new neural_ocr_1.default(_this.connection).fromJSON(json);
        });
    };
    Neural.prototype.categorize = function (messageIds) {
        var _this = this;
        var body = { message_id: messageIds };
        var path = 'categorize';
        return this.request(path, body).then(function (jsonArray) {
            return jsonArray.map(function (json) {
                return new neural_categorizer_1.default(_this.connection).fromJSON(json);
            });
        });
    };
    Neural.prototype.cleanConversation = function (messageIds, options) {
        var _this = this;
        var body = { message_id: messageIds };
        var path = 'conversation';
        if (options) {
            body = __assign(__assign({}, body), options);
        }
        return this.request(path, body).then(function (jsonArray) {
            return jsonArray.map(function (json) {
                return new neural_clean_conversation_1.default(_this.connection).fromJSON(json);
            });
        });
    };
    Neural.prototype.request = function (path, body) {
        return this.connection.request({
            method: 'PUT',
            path: "/neural/" + path,
            body: body,
            headers: {
                'Content-Type': 'application/json',
            },
        });
    };
    return Neural;
}(restful_model_1.default));
exports.default = Neural;
