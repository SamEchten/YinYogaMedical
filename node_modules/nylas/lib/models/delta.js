"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var attributes_1 = __importDefault(require("./attributes"));
var restful_model_1 = __importDefault(require("./restful-model"));
var contact_1 = __importDefault(require("./contact"));
var file_1 = __importDefault(require("./file"));
var message_1 = __importDefault(require("./message"));
var draft_1 = __importDefault(require("./draft"));
var thread_1 = __importDefault(require("./thread"));
var event_1 = __importDefault(require("./event"));
var folder_1 = __importStar(require("./folder"));
var DeltaClassMap = Object.freeze({
    contact: contact_1.default,
    file: file_1.default,
    message: message_1.default,
    draft: draft_1.default,
    thread: thread_1.default,
    event: event_1.default,
    folder: folder_1.default,
    label: folder_1.Label,
});
var Delta = /** @class */ (function (_super) {
    __extends(Delta, _super);
    function Delta(connection, props) {
        var _this = _super.call(this, connection) || this;
        _this.id = '';
        _this.cursor = '';
        _this.event = '';
        _this.object = '';
        _this.connection = connection;
        _this.initAttributes(props);
        if (_this.objectAttributes && DeltaClassMap[_this.object]) {
            _this.objectAttributes = new DeltaClassMap[_this.object](connection, _this.objectAttributes);
        }
        return _this;
    }
    Delta.prototype.fromJSON = function (json) {
        _super.prototype.fromJSON.call(this, json);
        if (this.objectAttributes && DeltaClassMap[this.object]) {
            this.objectAttributes = new DeltaClassMap[this.object](this.connection).fromJSON(this.objectAttributes);
        }
        return this;
    };
    Delta.streamingTimeoutMs = 15000;
    Delta.attributes = {
        id: attributes_1.default.String({
            modelKey: 'id',
        }),
        cursor: attributes_1.default.String({
            modelKey: 'cursor',
        }),
        event: attributes_1.default.String({
            modelKey: 'event',
        }),
        object: attributes_1.default.String({
            modelKey: 'object',
        }),
        objectAttributes: attributes_1.default.Object({
            modelKey: 'objectAttributes',
            jsonKey: 'attributes',
        }),
    };
    return Delta;
}(restful_model_1.default));
exports.default = Delta;
