import NylasConnection from '../nylas-connection';
import Model from './model';
import { Attribute } from './attributes';
import Account from './account';
export declare enum Scope {
    Email = "email",
    EmailModify = "email.modify",
    EmailReadOnly = "email.read_only",
    EmailSend = "email.send",
    EmailFoldersAndLabels = "email.folders_and_labels",
    EmailMetadata = "email.metadata",
    EmailDrafts = "email.drafts",
    Calendar = "calendar",
    CalendarReadOnly = "calendar.read_only",
    RoomResourcesReadOnly = "room_resources.read_only",
    Contacts = "contacts",
    ContactsReadOnly = "contacts.read_only"
}
export declare type VirtualCalendarProperties = {
    name: string;
    emailAddress: string;
    clientId?: string;
};
export declare class VirtualCalendar extends Model implements VirtualCalendarProperties {
    provider: string;
    name: string;
    emailAddress: string;
    scopes: Scope[];
    settings: {};
    clientId?: string;
    static attributes: Record<string, Attribute>;
    constructor(props?: VirtualCalendarProperties);
}
export declare enum NativeAuthenticationProvider {
    Gmail = "gmail",
    Yahoo = "yahoo",
    Exchange = "exchange",
    Outlook = "outlook",
    Imap = "imap",
    Icloud = "icloud",
    Hotmail = "hotmail",
    Aol = "aol",
    Office365 = "office365"
}
export declare type NativeAuthenticationProperties = VirtualCalendarProperties & {
    scopes: Scope[];
    settings: Record<string, any>;
    provider: NativeAuthenticationProvider;
};
declare type AuthorizationCode = {
    code: string;
};
export declare class NativeAuthentication extends Model implements NativeAuthenticationProperties {
    name: string;
    emailAddress: string;
    provider: NativeAuthenticationProvider;
    settings: {};
    scopes: Scope[];
    clientId?: string;
    static attributes: Record<string, Attribute>;
    constructor(props?: NativeAuthenticationProperties);
    toJSON(): Record<string, unknown>;
    fromJSON(json: Record<string, any>): this;
}
export default class Connect {
    connection: NylasConnection;
    clientId: string;
    clientSecret: string;
    constructor(connection: NylasConnection, clientId: string, clientSecret: string);
    authorize(auth: VirtualCalendarProperties | NativeAuthenticationProperties): Promise<AuthorizationCode>;
    token(code: string): Promise<Account>;
}
export {};
