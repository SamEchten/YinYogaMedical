"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var restful_model_collection_1 = __importDefault(require("./restful-model-collection"));
var message_1 = __importDefault(require("./message"));
var MessageRestfulModelCollection = /** @class */ (function (_super) {
    __extends(MessageRestfulModelCollection, _super);
    function MessageRestfulModelCollection(connection) {
        var _this = _super.call(this, message_1.default, connection) || this;
        _this.connection = connection;
        _this.modelClass = message_1.default;
        return _this;
    }
    /**
     * Return Multiple Messages by a list of Message IDs.
     * @param messageIds The list of message ids to find.
     * @param options Additional options including: view, offset, limit, and callback
     * @returns The list of messages.
     */
    MessageRestfulModelCollection.prototype.findMultiple = function (messageIds, options) {
        if (options && options.view) {
            // view is a parameter, so move it into a params object
            options.params = {
                view: options.view,
            };
            delete options.view;
        }
        // If only one message ID was passed in, use the normal find function
        if (messageIds.length == 1) {
            return this.find(messageIds[0], options).then(function (message) {
                return [message];
            });
        }
        return this.range(__assign({ path: this.path() + "/" + messageIds.join() }, options));
    };
    /**
     * Return raw message contents
     * @param messageId The message to fetch content of
     * @returns The raw message contents
     */
    MessageRestfulModelCollection.prototype.findRaw = function (messageId) {
        return this.connection
            .request({
            method: 'GET',
            headers: {
                Accept: 'message/rfc822',
            },
            path: this.path() + "/" + messageId,
        })
            .catch(function (err) { return Promise.reject(err); });
    };
    return MessageRestfulModelCollection;
}(restful_model_collection_1.default));
exports.default = MessageRestfulModelCollection;
