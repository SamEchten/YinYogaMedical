"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var model_1 = __importDefault(require("./model"));
var attributes_1 = __importDefault(require("./attributes"));
var AccessToken = /** @class */ (function (_super) {
    __extends(AccessToken, _super);
    function AccessToken(props) {
        var _this = _super.call(this) || this;
        _this.accessToken = '';
        _this.accountId = '';
        _this.emailAddress = '';
        _this.provider = '';
        _this.tokenType = 'bearer';
        _this.initAttributes(props);
        return _this;
    }
    AccessToken.attributes = {
        accessToken: attributes_1.default.String({
            modelKey: 'accessToken',
            jsonKey: 'access_token',
        }),
        accountId: attributes_1.default.String({
            modelKey: 'accountId',
            jsonKey: 'account_id',
        }),
        emailAddress: attributes_1.default.String({
            modelKey: 'emailAddress',
            jsonKey: 'email_address',
        }),
        provider: attributes_1.default.String({
            modelKey: 'provider',
        }),
        tokenType: attributes_1.default.String({
            modelKey: 'tokenType',
            jsonKey: 'token_type',
        }),
    };
    return AccessToken;
}(model_1.default));
exports.default = AccessToken;
