import NylasConnection from '../nylas-connection';
import Draft, { SendCallback } from './draft';
import OutboxJobStatus from './outbox-job-status';
import Model from './model';
import { Attribute } from './attributes';
declare type SendParams = {
    sendAt: Date | number;
    retryLimitDatetime?: Date | number;
    tracking?: Record<string, any>;
    callback?: SendCallback;
};
declare type UpdateParams = {
    updatedMessage?: Draft;
    sendAt?: Date | number;
    retryLimitDatetime?: Date | number;
};
export declare class SendGridVerifiedStatus extends Model {
    domainVerified?: boolean;
    senderVerified?: boolean;
    static attributes: Record<string, Attribute>;
}
export default class Outbox {
    connection: NylasConnection;
    private path;
    constructor(connection: NylasConnection);
    send(draft: Draft, options: SendParams): Promise<OutboxJobStatus>;
    update(jobStatusId: string, options: UpdateParams): Promise<OutboxJobStatus>;
    delete(jobStatusId: string): Promise<void>;
    sendGridVerificationStatus(): Promise<SendGridVerifiedStatus>;
    deleteSendGridSubUser(email: string): Promise<void>;
    private request;
    private static validateAndFormatDateTime;
    private static dateToEpoch;
}
export {};
