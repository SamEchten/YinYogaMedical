"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var attributes_1 = __importDefault(require("./attributes"));
var restful_model_1 = __importDefault(require("./restful-model"));
var File = /** @class */ (function (_super) {
    __extends(File, _super);
    function File(connection, props) {
        var _this = _super.call(this, connection, props) || this;
        _this.initAttributes(props);
        return _this;
    }
    File.prototype.upload = function (callback) {
        var _this = this;
        if (!this.filename) {
            throw new Error('Please define a filename');
        }
        if (!this.data) {
            throw new Error('Please add some data to the file');
        }
        if (!this.contentType) {
            throw new Error('Please define a content-type');
        }
        var formOptions = {
            filename: this.filename,
            contentType: this.contentType,
        };
        if (this.size) {
            formOptions.knownLength = this.size;
        }
        return this.connection
            .request({
            method: 'POST',
            path: "/" + File.collectionName,
            json: true,
            formData: {
                file: {
                    value: this.data,
                    options: formOptions,
                },
            },
        })
            .then(function (json) {
            // The API returns a list of files. It should
            // always have a length of 1 since we only
            // upload file-by-file.
            if (json.length > 0) {
                _this.fromJSON(json[0]);
                if (callback) {
                    callback(null, _this);
                }
                return Promise.resolve(_this);
            }
            else {
                return Promise.reject(null);
            }
        })
            .catch(function (err) {
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        });
    };
    File.prototype.download = function (callback) {
        if (!this.id) {
            throw new Error('Please provide a File id');
        }
        return this.connection
            .request({
            path: "/files/" + this.id + "/download",
            downloadRequest: true,
        })
            .then(function (file) {
            if (callback) {
                callback(null, file);
            }
            return Promise.resolve(file);
        })
            .catch(function (err) {
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        });
    };
    File.collectionName = 'files';
    File.attributes = __assign(__assign({}, restful_model_1.default.attributes), { contentType: attributes_1.default.String({
            modelKey: 'contentType',
            jsonKey: 'content_type',
        }), size: attributes_1.default.Number({
            modelKey: 'size',
        }), filename: attributes_1.default.String({
            modelKey: 'filename',
        }), messageIds: attributes_1.default.StringList({
            modelKey: 'messageIds',
            jsonKey: 'message_ids',
        }), contentId: attributes_1.default.String({
            modelKey: 'contentId',
            jsonKey: 'content_id',
        }), contentDisposition: attributes_1.default.String({
            modelKey: 'contentDisposition',
            jsonKey: 'content_disposition',
        }), data: attributes_1.default.Object({
            modelKey: 'data',
            readOnly: true,
        }) });
    return File;
}(restful_model_1.default));
exports.default = File;
