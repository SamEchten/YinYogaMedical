import NylasConnection from '../nylas-connection';
import Model from './model';
export declare type GetCallback = (error: Error | null, result?: Model) => void;
export default class ModelCollection<T extends Model> {
    connection: NylasConnection;
    modelClass: any;
    _path: string;
    baseUrl?: string;
    constructor(modelClass: any, connection: NylasConnection, path: string);
    forEach(params: Record<string, unknown> | undefined, eachCallback: (item: T) => void, completeCallback?: (err?: Error | null | undefined) => void): void;
    list(params?: Record<string, unknown>, callback?: (error: Error | null, obj?: T[]) => void): Promise<T[]>;
    find(id: string, paramsArg?: Record<string, unknown> | GetCallback | null, callbackArg?: GetCallback | Record<string, unknown> | null): Promise<T>;
    path(): string;
    protected range({ params, offset, limit, callback, path, }: {
        params?: Record<string, unknown>;
        offset?: number;
        limit?: number;
        callback?: (error: Error | null, results?: T[]) => void;
        path?: string;
    }): Promise<T[]>;
    protected getItems(params: Record<string, unknown>, offset: number, limit: number, path?: string): Promise<T[]>;
    protected createModel(json: Record<string, unknown>): T;
    private getModel;
    private getModelCollection;
}
