"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var restful_model_1 = __importDefault(require("./restful-model"));
var attributes_1 = __importDefault(require("./attributes"));
var file_1 = __importDefault(require("./file"));
var event_1 = __importDefault(require("./event"));
var email_participant_1 = __importDefault(require("./email-participant"));
var folder_1 = __importStar(require("./folder"));
var Message = /** @class */ (function (_super) {
    __extends(Message, _super);
    function Message(connection, props) {
        var _this = _super.call(this, connection, props) || this;
        _this.to = [];
        _this.initAttributes(props);
        return _this;
    }
    // We calculate the list of participants instead of grabbing it from
    // a parent because it is a better source of ground truth, and saves us
    // from more dependencies.
    Message.prototype.participants = function () {
        var participants = {};
        var to = this.to || [];
        var cc = this.cc || [];
        var from = this.from || [];
        var contacts = Array.from(new Set(__spreadArrays(to, cc, from)));
        for (var _i = 0, contacts_1 = contacts; _i < contacts_1.length; _i++) {
            var contact = contacts_1[_i];
            if (contact && (contact.email ? contact.email.length : '') > 0) {
                participants[(contact.email || ''.toLowerCase().trim()) + " " + (contact.name || '')
                    .toLowerCase()
                    .trim()] = new email_participant_1.default(contact);
            }
        }
        return Object.values(participants);
    };
    Message.prototype.fileIds = function () {
        return this.files ? this.files.map(function (file) { return file.id; }) : [];
    };
    Message.prototype.getRaw = function () {
        return this.connection
            .request({
            method: 'GET',
            headers: {
                Accept: 'message/rfc822',
            },
            path: "/" + Message.collectionName + "/" + this.id,
        })
            .catch(function (err) { return Promise.reject(err); });
    };
    Message.prototype.saveRequestBody = function () {
        // It's possible to update most of the fields of a draft.
        if (this.constructor.name === 'Draft') {
            return _super.prototype.saveRequestBody.call(this);
        }
        // Messages are more limited, though.
        var json = {};
        if (this.labels) {
            json['label_ids'] = Array.from(this.labels).map(function (label) { return label.id; });
        }
        else if (this.folder) {
            json['folder_id'] = this.folder.id;
        }
        json['starred'] = this.starred;
        json['unread'] = this.unread;
        json['metadata'] = this.metadata;
        return json;
    };
    Message.collectionName = 'messages';
    Message.attributes = __assign(__assign({}, restful_model_1.default.attributes), { subject: attributes_1.default.String({
            modelKey: 'subject',
        }), from: attributes_1.default.Collection({
            modelKey: 'from',
            itemClass: email_participant_1.default,
        }), replyTo: attributes_1.default.Collection({
            modelKey: 'replyTo',
            jsonKey: 'reply_to',
            itemClass: email_participant_1.default,
        }), to: attributes_1.default.Collection({
            modelKey: 'to',
            itemClass: email_participant_1.default,
        }), cc: attributes_1.default.Collection({
            modelKey: 'cc',
            itemClass: email_participant_1.default,
        }), bcc: attributes_1.default.Collection({
            modelKey: 'bcc',
            itemClass: email_participant_1.default,
        }), date: attributes_1.default.DateTime({
            modelKey: 'date',
        }), threadId: attributes_1.default.String({
            modelKey: 'threadId',
            jsonKey: 'thread_id',
        }), snippet: attributes_1.default.String({
            modelKey: 'snippet',
        }), body: attributes_1.default.String({
            modelKey: 'body',
        }), unread: attributes_1.default.Boolean({
            modelKey: 'unread',
        }), starred: attributes_1.default.Boolean({
            modelKey: 'starred',
        }), files: attributes_1.default.Collection({
            modelKey: 'files',
            itemClass: file_1.default,
            readOnly: true,
        }), events: attributes_1.default.Collection({
            modelKey: 'events',
            itemClass: event_1.default,
        }), folder: attributes_1.default.Object({
            modelKey: 'folder',
            itemClass: folder_1.default,
        }), labels: attributes_1.default.Collection({
            modelKey: 'labels',
            itemClass: folder_1.Label,
        }), metadata: attributes_1.default.Object({
            modelKey: 'metadata',
        }), headers: attributes_1.default.Object({
            modelKey: 'headers',
        }), jobStatusId: attributes_1.default.String({
            modelKey: 'jobStatusId',
            jsonKey: 'job_status_id',
            readOnly: true,
        }) });
    return Message;
}(restful_model_1.default));
exports.default = Message;
