"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var management_model_1 = __importDefault(require("./management-model"));
var attributes_1 = __importDefault(require("./attributes"));
var model_1 = __importDefault(require("./model"));
var ApplicationIPAddresses = /** @class */ (function (_super) {
    __extends(ApplicationIPAddresses, _super);
    function ApplicationIPAddresses(props) {
        var _this = _super.call(this) || this;
        _this.ipAddresses = [];
        _this.updatedAt = 0;
        _this.initAttributes(props);
        return _this;
    }
    ApplicationIPAddresses.attributes = {
        ipAddresses: attributes_1.default.StringList({
            modelKey: 'ipAddresses',
            jsonKey: 'ip_addresses',
        }),
        updatedAt: attributes_1.default.Number({
            modelKey: 'updatedAt',
            jsonKey: 'updated_at',
        }),
    };
    return ApplicationIPAddresses;
}(model_1.default));
exports.ApplicationIPAddresses = ApplicationIPAddresses;
var AccountTokenInfo = /** @class */ (function (_super) {
    __extends(AccountTokenInfo, _super);
    function AccountTokenInfo(props) {
        var _this = _super.call(this) || this;
        _this.scopes = '';
        _this.state = '';
        _this.createdAt = 0;
        _this.updatedAt = 0;
        _this.initAttributes(props);
        return _this;
    }
    AccountTokenInfo.attributes = {
        scopes: attributes_1.default.String({
            modelKey: 'scopes',
        }),
        state: attributes_1.default.String({
            modelKey: 'state',
        }),
        createdAt: attributes_1.default.Number({
            modelKey: 'createdAt',
            jsonKey: 'created_at',
        }),
        updatedAt: attributes_1.default.Number({
            modelKey: 'updatedAt',
            jsonKey: 'updated_at',
        }),
    };
    return AccountTokenInfo;
}(model_1.default));
exports.AccountTokenInfo = AccountTokenInfo;
var ManagementAccount = /** @class */ (function (_super) {
    __extends(ManagementAccount, _super);
    function ManagementAccount(connection, clientId, props) {
        var _this = _super.call(this, connection, clientId, props) || this;
        _this.billingState = '';
        _this.emailAddress = '';
        _this.namespaceId = '';
        _this.provider = '';
        _this.syncState = '';
        _this.authenticationType = '';
        _this.trial = false;
        _this.initAttributes(props);
        return _this;
    }
    ManagementAccount.prototype.upgrade = function () {
        return this.connection
            .request({
            method: 'POST',
            path: "/a/" + this.clientId + "/" + this.constructor.collectionName + "/" + this.id + "/upgrade",
        })
            .then(function (json) { return Promise.resolve(json); })
            .catch(function (err) { return Promise.reject(err); });
    };
    ManagementAccount.prototype.downgrade = function () {
        return this.connection
            .request({
            method: 'POST',
            path: "/a/" + this.clientId + "/" + this.constructor.collectionName + "/" + this.id + "/downgrade",
        })
            .then(function (json) { return Promise.resolve(json); })
            .catch(function (err) { return Promise.reject(err); });
    };
    ManagementAccount.prototype.revokeAll = function (keepAccessToken) {
        return this.connection
            .request({
            method: 'POST',
            path: "/a/" + this.clientId + "/" + this.constructor.collectionName + "/" + this.id + "/revoke-all",
            body: { keep_access_token: keepAccessToken },
        })
            .then(function (json) { return Promise.resolve(json); })
            .catch(function (err) { return Promise.reject(err); });
    };
    ManagementAccount.prototype.ipAddresses = function () {
        return this.connection
            .request({
            method: 'GET',
            path: "/a/" + this.clientId + "/ip_addresses",
        })
            .then(function (json) {
            return Promise.resolve(new ApplicationIPAddresses().fromJSON(json));
        })
            .catch(function (err) { return Promise.reject(err); });
    };
    ManagementAccount.prototype.tokenInfo = function (accessToken) {
        return this.connection
            .request({
            method: 'POST',
            path: "/a/" + this.clientId + "/" + this.constructor.collectionName + "/" + this.id + "/token-info",
            body: {
                access_token: accessToken,
            },
        })
            .then(function (json) { return Promise.resolve(new AccountTokenInfo().fromJSON(json)); })
            .catch(function (err) { return Promise.reject(err); });
    };
    ManagementAccount.prototype.save = function (params, callback) {
        if (params === void 0) { params = {}; }
        return _super.prototype.save.call(this, params, callback);
    };
    ManagementAccount.prototype.saveRequestBody = function () {
        return {
            metadata: this.metadata,
        };
    };
    ManagementAccount.prototype.saveEndpoint = function () {
        return "/a/" + this.connection.clientId + "/accounts";
    };
    ManagementAccount.collectionName = 'accounts';
    ManagementAccount.attributes = __assign(__assign({}, management_model_1.default.attributes), { billingState: attributes_1.default.String({
            modelKey: 'billingState',
            jsonKey: 'billing_state',
        }), emailAddress: attributes_1.default.String({
            modelKey: 'emailAddress',
            jsonKey: 'email',
        }), namespaceId: attributes_1.default.String({
            modelKey: 'namespaceId',
            jsonKey: 'namespace_id',
        }), provider: attributes_1.default.String({
            modelKey: 'provider',
        }), syncState: attributes_1.default.String({
            modelKey: 'syncState',
            jsonKey: 'sync_state',
        }), authenticationType: attributes_1.default.String({
            modelKey: 'authenticationType',
            jsonKey: 'authentication_type',
        }), trial: attributes_1.default.Boolean({
            modelKey: 'trial',
        }), metadata: attributes_1.default.Object({
            modelKey: 'metadata',
        }) });
    return ManagementAccount;
}(management_model_1.default));
exports.default = ManagementAccount;
