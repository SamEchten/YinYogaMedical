import Model from './model';
import { Attribute } from './attributes';
import { FreeBusyProperties, TimeSlot, TimeSlotProperties, FreeBusyCalendarProperties } from './free-busy';
export declare enum RoundRobin {
    MaxAvailability = "max-availability",
    MaxFairness = "max-fairness"
}
export declare enum Days {
    Monday = 0,
    Tuesday = 1,
    Wednesday = 2,
    Thursday = 3,
    Friday = 4,
    Saturday = 5,
    Sunday = 6
}
declare type AvailabilityQuery = {
    duration: number;
    interval: number;
    startTime: number;
    endTime: number;
    buffer?: number;
    tentativeBusy?: boolean;
    freeBusy?: FreeBusyProperties[];
    openHours?: OpenHoursProperties[];
    calendars?: FreeBusyCalendarProperties[];
};
export declare type SingleAvailabilityQuery = AvailabilityQuery & {
    emails?: string[];
    eventCollectionId?: string;
    roundRobin?: RoundRobin;
};
export declare type ConsecutiveAvailabilityQuery = AvailabilityQuery & {
    emails?: Array<string[]>;
};
export declare type OpenHoursProperties = {
    emails: string[];
    days: Days[];
    timezone: string;
    start: string;
    end: string;
};
export declare class OpenHours extends Model implements OpenHoursProperties {
    objectType: string;
    emails: string[];
    days: Days[];
    timezone: string;
    start: string;
    end: string;
    static attributes: Record<string, Attribute>;
    constructor(props?: OpenHoursProperties);
}
export declare type CalendarConsecutiveAvailabilityProperties = {
    emails: string[];
    startTime: number;
    endTime: number;
};
export declare class CalendarConsecutiveAvailability extends Model implements CalendarConsecutiveAvailabilityProperties {
    emails: string[];
    startTime: number;
    endTime: number;
    static attributes: Record<string, Attribute>;
    constructor(props?: CalendarConsecutiveAvailabilityProperties);
}
export declare type CalendarAvailabilityProperties = {
    timeSlots: TimeSlotProperties[];
    order?: string[];
};
export default class CalendarAvailability extends Model implements CalendarAvailabilityProperties {
    object: string;
    timeSlots: TimeSlot[];
    order?: string[];
    static attributes: Record<string, Attribute>;
    constructor(props?: CalendarAvailabilityProperties);
}
export {};
