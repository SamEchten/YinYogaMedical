import RestfulModel from './restful-model';
import NeuralSentimentAnalysis from './neural-sentiment-analysis';
import NeuralSignatureExtraction from './neural-signature-extraction';
import NeuralOcr from './neural-ocr';
import NeuralCategorizer from './neural-categorizer';
import NeuralCleanConversation from './neural-clean-conversation';
import Model from './model';
import { Attribute } from './attributes';
export declare type NeuralMessageOptionsProperties = {
    ignoreLinks?: boolean;
    ignoreImages?: boolean;
    ignoreTables?: boolean;
    removeConclusionPhrases?: boolean;
    imagesAsMarkdown?: boolean;
    parseContacts?: boolean;
};
export declare class NeuralMessageOptions extends Model implements NeuralMessageOptionsProperties {
    ignoreLinks?: boolean;
    ignoreImages?: boolean;
    ignoreTables?: boolean;
    removeConclusionPhrases?: boolean;
    imagesAsMarkdown?: boolean;
    parseContacts?: boolean;
    static attributes: Record<string, Attribute>;
    constructor(props?: NeuralMessageOptionsProperties);
    toJSON(writeParseContact?: boolean): Record<string, boolean>;
}
export default class Neural extends RestfulModel {
    sentimentAnalysisMessage(messageIds: string[]): Promise<NeuralSentimentAnalysis[]>;
    sentimentAnalysisText(text: string): Promise<NeuralSentimentAnalysis>;
    extractSignature(messageIds: string[], options?: NeuralMessageOptionsProperties): Promise<NeuralSignatureExtraction[]>;
    ocrRequest(fileId: string, pages?: number[]): Promise<NeuralOcr>;
    categorize(messageIds: string[]): Promise<NeuralCategorizer[]>;
    cleanConversation(messageIds: string[], options?: NeuralMessageOptionsProperties): Promise<NeuralCleanConversation[]>;
    private request;
}
