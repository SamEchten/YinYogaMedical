import Calendar from './calendar';
import NylasConnection from '../nylas-connection';
import RestfulModelCollection from './restful-model-collection';
import FreeBusy, { FreeBusyQuery } from './free-busy';
import CalendarAvailability, { CalendarConsecutiveAvailability, ConsecutiveAvailabilityQuery, SingleAvailabilityQuery } from './calendar-availability';
export default class CalendarRestfulModelCollection extends RestfulModelCollection<Calendar> {
    connection: NylasConnection;
    modelClass: typeof Calendar;
    constructor(connection: NylasConnection);
    freeBusy(options: FreeBusyQuery, callback?: (error: Error | null, data?: Record<string, unknown>) => void): Promise<FreeBusy[]>;
    availability(options: SingleAvailabilityQuery, callback?: (error: Error | null, data?: Record<string, any>) => void): Promise<CalendarAvailability>;
    consecutiveAvailability(options: ConsecutiveAvailabilityQuery, callback?: (error: Error | null, data?: {
        [key: string]: any;
    }) => void): Promise<CalendarConsecutiveAvailability>;
    private buildAvailabilityPayload;
    private queryIsValid;
}
