import { Attribute } from './attributes';
import NylasConnection from '../nylas-connection';
import Model from './model';
export declare type SaveCallback = (error: Error | null, result?: RestfulModel) => void;
interface RestfulModelJSON {
    id: string;
    object: string;
    accountId: string;
    [key: string]: any;
}
declare type requestOptions = {
    body: Record<string, unknown>;
    qs: Record<string, unknown>;
};
export default class RestfulModel extends Model {
    static endpointName: string;
    static collectionName: string;
    accountId?: string;
    connection: NylasConnection;
    id?: string;
    object?: string;
    baseUrl?: string;
    static attributes: Record<string, Attribute>;
    constructor(connection: NylasConnection, props?: Partial<RestfulModelJSON>);
    static propsFromJSON(json: Partial<RestfulModelJSON> | undefined, parent: unknown): Partial<RestfulModelJSON>;
    isEqual(other: RestfulModel): boolean;
    fromJSON(json?: Partial<RestfulModelJSON>): this;
    pathPrefix(): string;
    saveEndpoint(): string;
    deleteRequestQueryString(_params: Record<string, unknown>): Record<string, unknown>;
    deleteRequestBody(_params: Record<string, unknown>): Record<string, unknown>;
    deleteRequestOptions(params: Record<string, unknown>): requestOptions;
    protected save(params?: {} | SaveCallback, callback?: SaveCallback): Promise<this>;
    protected get(params?: Record<string, any>, callback?: (error: Error | null, result?: any) => void, pathSuffix?: string): Promise<any>;
}
export {};
