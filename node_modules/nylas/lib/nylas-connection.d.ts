/// <reference types="node" />
import { URL } from 'url';
import { Request } from 'node-fetch';
import RestfulModelCollection from './models/restful-model-collection';
import CalendarRestfulModelCollection from './models/calendar-restful-model-collection';
import ContactRestfulModelCollection from './models/contact-restful-model-collection';
import RestfulModelInstance from './models/restful-model-instance';
import Account from './models/account';
import Thread from './models/thread';
import Draft from './models/draft';
import File from './models/file';
import Event from './models/event';
import Resource from './models/resource';
import Folder, { Label } from './models/folder';
import { AppendOptions } from 'form-data';
import Neural from './models/neural';
import ComponentRestfulModelCollection from './models/component-restful-model-collection';
import SchedulerRestfulModelCollection from './models/scheduler-restful-model-collection';
import MessageRestfulModelCollection from './models/message-restful-model-collection';
import DeltaCollection from './models/delta-collection';
import Outbox from './models/outbox';
import JobStatusRestfulModelCollection from './models/job-status-restful-model-collection';
export declare enum AuthMethod {
    BASIC = 0,
    BEARER = 1
}
export declare type RequestOptions = {
    path: string;
    method?: string;
    headers?: Record<string, string>;
    qs?: Record<string, unknown>;
    downloadRequest?: boolean;
    json?: boolean;
    formData?: Record<string, FormDataType>;
    body?: any;
    baseUrl?: string;
    url?: URL;
    authMethod?: AuthMethod;
};
export declare type FormDataType = {
    value: unknown;
    options?: Record<string, unknown> | AppendOptions;
};
export default class NylasConnection {
    accessToken: string | null | undefined;
    clientId: string | null | undefined;
    threads: RestfulModelCollection<Thread>;
    contacts: ContactRestfulModelCollection;
    messages: MessageRestfulModelCollection;
    drafts: RestfulModelCollection<Draft>;
    files: RestfulModelCollection<File>;
    calendars: CalendarRestfulModelCollection;
    jobStatuses: JobStatusRestfulModelCollection;
    events: RestfulModelCollection<Event>;
    resources: RestfulModelCollection<Resource>;
    deltas: DeltaCollection;
    labels: RestfulModelCollection<Label>;
    folders: RestfulModelCollection<Folder>;
    account: RestfulModelInstance<Account>;
    component: ComponentRestfulModelCollection;
    scheduler: SchedulerRestfulModelCollection;
    outbox: Outbox;
    neural: Neural;
    constructor(accessToken: string | null | undefined, { clientId }: {
        clientId: string | null | undefined;
    });
    requestOptions(options: RequestOptions): RequestOptions;
    newRequest(options: RequestOptions): Request;
    private getWarningForVersion;
    request(options: RequestOptions): Promise<any>;
}
